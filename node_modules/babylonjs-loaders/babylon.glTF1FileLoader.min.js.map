{"version":3,"file":"babylon.glTF1FileLoader.min.js","mappings":"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","sources":["webpack://LOADERS/webpack/universalModuleDefinition","webpack://LOADERS/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://LOADERS/webpack/bootstrap","webpack://LOADERS/webpack/runtime/define property getters","webpack://LOADERS/webpack/runtime/global","webpack://LOADERS/webpack/runtime/hasOwnProperty shorthand","webpack://LOADERS/webpack/runtime/make namespace object","webpack://LOADERS/../../../../node_modules/tslib/tslib.es6.mjs","webpack://LOADERS/../../../dev/loaders/src/glTF/glTFValidation.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/glTFFileLoader.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/glTFFileLoader.metadata.ts","webpack://LOADERS/../../../lts/loaders/src/legacy/legacy-glTF.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFLoaderInterfaces.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFLoaderUtils.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFLoader.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFBinaryExtension.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFMaterialsCommonExtension.ts","webpack://LOADERS/../../../lts/loaders/src/legacy/legacy-glTF1.ts","webpack://LOADERS/./src/glTF1FileLoader.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-loaders\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-loaders\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"LOADERS\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__597__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__597__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","import type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let GLTFValidator: GLTF2.IGLTFValidator;\r\n\r\n// WorkerGlobalScope\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction validateAsync(\r\n    data: string | Uint8Array,\r\n    rootUrl: string,\r\n    fileName: string,\r\n    getExternalResource: (uri: string) => Promise<Uint8Array>\r\n): Promise<GLTF2.IGLTFValidationResults> {\r\n    const options: GLTF2.IGLTFValidationOptions = {\r\n        externalResourceFunction: getExternalResource,\r\n    };\r\n\r\n    if (fileName) {\r\n        options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\r\n    }\r\n\r\n    return ArrayBuffer.isView(data) ? GLTFValidator.validateBytes(data, options) : GLTFValidator.validateString(data, options);\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n */\r\nfunction workerFunc(): void {\r\n    const pendingExternalResources: Array<{ resolve: (data: any) => void; reject: (reason: any) => void }> = [];\r\n\r\n    onmessage = (message) => {\r\n        const data = message.data;\r\n        switch (data.id) {\r\n            case \"init\": {\r\n                importScripts(data.url);\r\n                break;\r\n            }\r\n            case \"validate\": {\r\n                validateAsync(\r\n                    data.data,\r\n                    data.rootUrl,\r\n                    data.fileName,\r\n                    (uri) =>\r\n                        new Promise((resolve, reject) => {\r\n                            const index = pendingExternalResources.length;\r\n                            pendingExternalResources.push({ resolve, reject });\r\n                            postMessage({ id: \"getExternalResource\", index: index, uri: uri });\r\n                        })\r\n                ).then(\r\n                    (value) => {\r\n                        postMessage({ id: \"validate.resolve\", value: value });\r\n                    },\r\n                    (reason) => {\r\n                        postMessage({ id: \"validate.reject\", reason: reason });\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case \"getExternalResource.resolve\": {\r\n                pendingExternalResources[data.index].resolve(data.value);\r\n                break;\r\n            }\r\n            case \"getExternalResource.reject\": {\r\n                pendingExternalResources[data.index].reject(data.reason);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Configuration for glTF validation\r\n */\r\nexport interface IGLTFValidationConfiguration {\r\n    /**\r\n     * The url of the glTF validator.\r\n     */\r\n    url: string;\r\n}\r\n\r\n/**\r\n * glTF validation\r\n */\r\nexport class GLTFValidation {\r\n    /**\r\n     * The configuration. Defaults to `{ url: \"https://cdn.babylonjs.com/gltf_validator.js\" }`.\r\n     */\r\n    public static Configuration: IGLTFValidationConfiguration = {\r\n        url: `${Tools._DefaultCdnUrl}/gltf_validator.js`,\r\n    };\r\n\r\n    private static _LoadScriptPromise: Promise<void>;\r\n\r\n    /**\r\n     * Validate a glTF asset using the glTF-Validator.\r\n     * @param data The JSON of a glTF or the array buffer of a binary glTF\r\n     * @param rootUrl The root url for the glTF\r\n     * @param fileName The file name for the glTF\r\n     * @param getExternalResource The callback to get external resources for the glTF validator\r\n     * @returns A promise that resolves with the glTF validation results once complete\r\n     */\r\n    public static ValidateAsync(\r\n        data: string | Uint8Array,\r\n        rootUrl: string,\r\n        fileName: string,\r\n        getExternalResource: (uri: string) => Promise<Uint8Array>\r\n    ): Promise<GLTF2.IGLTFValidationResults> {\r\n        if (typeof Worker === \"function\") {\r\n            return new Promise((resolve, reject) => {\r\n                const workerContent = `${validateAsync}(${workerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                const worker = new Worker(workerBlobUrl);\r\n\r\n                const onError = (error: ErrorEvent) => {\r\n                    worker.removeEventListener(\"error\", onError);\r\n                    worker.removeEventListener(\"message\", onMessage);\r\n                    reject(error);\r\n                };\r\n\r\n                const onMessage = (message: MessageEvent) => {\r\n                    const data = message.data;\r\n                    switch (data.id) {\r\n                        case \"getExternalResource\": {\r\n                            getExternalResource(data.uri).then(\r\n                                (value) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.resolve\", index: data.index, value: value }, [value.buffer]);\r\n                                },\r\n                                (reason) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.reject\", index: data.index, reason: reason });\r\n                                }\r\n                            );\r\n                            break;\r\n                        }\r\n                        case \"validate.resolve\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            resolve(data.value);\r\n                            worker.terminate();\r\n                            break;\r\n                        }\r\n                        case \"validate.reject\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(data.reason);\r\n                            worker.terminate();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                worker.addEventListener(\"error\", onError);\r\n                worker.addEventListener(\"message\", onMessage);\r\n\r\n                worker.postMessage({ id: \"init\", url: Tools.GetBabylonScriptURL(this.Configuration.url) });\r\n\r\n                if (ArrayBuffer.isView(data)) {\r\n                    // Slice the data to avoid copying the whole array buffer.\r\n                    const slicedData = data.slice();\r\n                    worker.postMessage({ id: \"validate\", data: slicedData, rootUrl: rootUrl, fileName: fileName }, [slicedData.buffer]);\r\n                } else {\r\n                    worker.postMessage({ id: \"validate\", data: data, rootUrl: rootUrl, fileName: fileName });\r\n                }\r\n            });\r\n        } else {\r\n            if (!this._LoadScriptPromise) {\r\n                this._LoadScriptPromise = Tools.LoadBabylonScriptAsync(this.Configuration.url);\r\n            }\r\n\r\n            return this._LoadScriptPromise.then(() => {\r\n                return validateAsync(data, rootUrl, fileName, getExternalResource);\r\n            });\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { ISceneLoaderPluginFactory, ISceneLoaderPluginAsync, ISceneLoaderProgressEvent, ISceneLoaderAsyncResult, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene, IDisposable } from \"core/scene\";\r\nimport type { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IFileRequest } from \"core/Misc/fileRequest\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\nimport { DataReader } from \"core/Misc/dataReader\";\r\nimport { GLTFValidation } from \"./glTFValidation\";\r\nimport { GLTFFileLoaderMetadata, GLTFMagicBase64Encoded } from \"./glTFFileLoader.metadata\";\r\nimport type { LoadFileError } from \"core/Misc/fileTools\";\r\nimport { DecodeBase64UrlToBinary } from \"core/Misc/fileTools\";\r\nimport { RuntimeError, ErrorCodes } from \"core/Misc/error\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { MorphTargetManager } from \"core/Morph/morphTargetManager\";\r\n\r\n/**\r\n * Defines options for glTF loader extensions. This interface is extended by specific extensions.\r\n */\r\nexport interface GLTFLoaderExtensionOptions extends Record<string, Record<string, unknown> | undefined> {}\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the glTF loader.\r\n         */\r\n        [GLTFFileLoaderMetadata.name]: Partial<GLTFLoaderOptions>;\r\n    }\r\n}\r\n\r\ninterface IFileRequestInfo extends IFileRequest {\r\n    _lengthComputable?: boolean;\r\n    _loaded?: number;\r\n    _total?: number;\r\n}\r\n\r\nfunction readAsync(arrayBuffer: ArrayBuffer, byteOffset: number, byteLength: number): Promise<Uint8Array> {\r\n    try {\r\n        return Promise.resolve(new Uint8Array(arrayBuffer, byteOffset, byteLength));\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\nfunction readViewAsync(arrayBufferView: ArrayBufferView, byteOffset: number, byteLength: number): Promise<Uint8Array> {\r\n    try {\r\n        if (byteOffset < 0 || byteOffset >= arrayBufferView.byteLength) {\r\n            throw new RangeError(\"Offset is out of range.\");\r\n        }\r\n\r\n        if (byteOffset + byteLength > arrayBufferView.byteLength) {\r\n            throw new RangeError(\"Length is out of range.\");\r\n        }\r\n\r\n        return Promise.resolve(new Uint8Array(arrayBufferView.buffer, arrayBufferView.byteOffset + byteOffset, byteLength));\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\n/**\r\n * Mode that determines the coordinate system to use.\r\n */\r\nexport enum GLTFLoaderCoordinateSystemMode {\r\n    /**\r\n     * Automatically convert the glTF right-handed data to the appropriate system based on the current coordinate system mode of the scene.\r\n     */\r\n    AUTO,\r\n\r\n    /**\r\n     * Sets the useRightHandedSystem flag on the scene.\r\n     */\r\n    FORCE_RIGHT_HANDED,\r\n}\r\n\r\n/**\r\n * Mode that determines what animations will start.\r\n */\r\nexport enum GLTFLoaderAnimationStartMode {\r\n    /**\r\n     * No animation will start.\r\n     */\r\n    NONE,\r\n\r\n    /**\r\n     * The first animation will start.\r\n     */\r\n    FIRST,\r\n\r\n    /**\r\n     * All animations will start.\r\n     */\r\n    ALL,\r\n}\r\n\r\n/**\r\n * Interface that contains the data for the glTF asset.\r\n */\r\nexport interface IGLTFLoaderData {\r\n    /**\r\n     * The object that represents the glTF JSON.\r\n     */\r\n    json: Object;\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    bin: Nullable<IDataBuffer>;\r\n}\r\n\r\n/**\r\n * Interface for extending the loader.\r\n */\r\nexport interface IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Defines the order of this extension.\r\n     * The loader sorts the extensions using these values when loading.\r\n     */\r\n    order?: number;\r\n}\r\n\r\n/**\r\n * Loader state.\r\n */\r\nexport enum GLTFLoaderState {\r\n    /**\r\n     * The asset is loading.\r\n     */\r\n    LOADING,\r\n\r\n    /**\r\n     * The asset is ready for rendering.\r\n     */\r\n    READY,\r\n\r\n    /**\r\n     * The asset is completely loaded.\r\n     */\r\n    COMPLETE,\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFLoader extends IDisposable {\r\n    importMeshAsync: (\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        container: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ) => Promise<ISceneLoaderAsyncResult>;\r\n    loadAsync: (scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Adds default/implicit options to extension specific options.\r\n */\r\ntype DefaultExtensionOptions<BaseExtensionOptions> = {\r\n    /**\r\n     * Defines if the extension is enabled\r\n     */\r\n    enabled?: boolean;\r\n} & BaseExtensionOptions;\r\n\r\nabstract class GLTFLoaderOptions {\r\n    // eslint-disable-next-line babylonjs/available\r\n    protected copyFrom(options?: Partial<Readonly<GLTFLoaderOptions>>) {\r\n        if (options) {\r\n            this.onParsed = options.onParsed;\r\n            this.coordinateSystemMode = options.coordinateSystemMode ?? this.coordinateSystemMode;\r\n            this.animationStartMode = options.animationStartMode ?? this.animationStartMode;\r\n            this.loadNodeAnimations = options.loadNodeAnimations ?? this.loadNodeAnimations;\r\n            this.loadSkins = options.loadSkins ?? this.loadSkins;\r\n            this.loadMorphTargets = options.loadMorphTargets ?? this.loadMorphTargets;\r\n            this.compileMaterials = options.compileMaterials ?? this.compileMaterials;\r\n            this.useClipPlane = options.useClipPlane ?? this.useClipPlane;\r\n            this.compileShadowGenerators = options.compileShadowGenerators ?? this.compileShadowGenerators;\r\n            this.transparencyAsCoverage = options.transparencyAsCoverage ?? this.transparencyAsCoverage;\r\n            this.useRangeRequests = options.useRangeRequests ?? this.useRangeRequests;\r\n            this.createInstances = options.createInstances ?? this.createInstances;\r\n            this.alwaysComputeBoundingBox = options.alwaysComputeBoundingBox ?? this.alwaysComputeBoundingBox;\r\n            this.loadAllMaterials = options.loadAllMaterials ?? this.loadAllMaterials;\r\n            this.loadOnlyMaterials = options.loadOnlyMaterials ?? this.loadOnlyMaterials;\r\n            this.skipMaterials = options.skipMaterials ?? this.skipMaterials;\r\n            this.useSRGBBuffers = options.useSRGBBuffers ?? this.useSRGBBuffers;\r\n            this.targetFps = options.targetFps ?? this.targetFps;\r\n            this.alwaysComputeSkeletonRootNode = options.alwaysComputeSkeletonRootNode ?? this.alwaysComputeSkeletonRootNode;\r\n            this.useGltfTextureNames = options.useGltfTextureNames ?? this.useGltfTextureNames;\r\n            this.preprocessUrlAsync = options.preprocessUrlAsync ?? this.preprocessUrlAsync;\r\n            this.customRootNode = options.customRootNode;\r\n            this.onMeshLoaded = options.onMeshLoaded;\r\n            this.onSkinLoaded = options.onSkinLoaded;\r\n            this.onTextureLoaded = options.onTextureLoaded;\r\n            this.onMaterialLoaded = options.onMaterialLoaded;\r\n            this.onCameraLoaded = options.onCameraLoaded;\r\n            this.extensionOptions = options.extensionOptions ?? this.extensionOptions;\r\n        }\r\n    }\r\n\r\n    // --------------\r\n    // Common options\r\n    // --------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public abstract onParsed?: ((loaderData: IGLTFLoaderData) => void) | undefined;\r\n\r\n    // ----------\r\n    // V2 options\r\n    // ----------\r\n\r\n    /**\r\n     * The coordinate system mode. Defaults to AUTO.\r\n     */\r\n    public coordinateSystemMode = GLTFLoaderCoordinateSystemMode.AUTO;\r\n\r\n    /**\r\n     * The animation start mode. Defaults to FIRST.\r\n     */\r\n    public animationStartMode = GLTFLoaderAnimationStartMode.FIRST;\r\n\r\n    /**\r\n     * Defines if the loader should load node animations. Defaults to true.\r\n     * NOTE: The animation of this node will still load if the node is also a joint of a skin and `loadSkins` is true.\r\n     */\r\n    public loadNodeAnimations = true;\r\n\r\n    /**\r\n     * Defines if the loader should load skins. Defaults to true.\r\n     */\r\n    public loadSkins = true;\r\n\r\n    /**\r\n     * Defines if the loader should load morph targets. Defaults to true.\r\n     */\r\n    public loadMorphTargets = true;\r\n\r\n    /**\r\n     * Defines if the loader should compile materials before raising the success callback. Defaults to false.\r\n     */\r\n    public compileMaterials = false;\r\n\r\n    /**\r\n     * Defines if the loader should also compile materials with clip planes. Defaults to false.\r\n     */\r\n    public useClipPlane = false;\r\n\r\n    /**\r\n     * Defines if the loader should compile shadow generators before raising the success callback. Defaults to false.\r\n     */\r\n    public compileShadowGenerators = false;\r\n\r\n    /**\r\n     * Defines if the Alpha blended materials are only applied as coverage.\r\n     * If false, (default) The luminance of each pixel will reduce its opacity to simulate the behaviour of most physical materials.\r\n     * If true, no extra effects are applied to transparent pixels.\r\n     */\r\n    public transparencyAsCoverage = false;\r\n\r\n    /**\r\n     * Defines if the loader should use range requests when load binary glTF files from HTTP.\r\n     * Enabling will disable offline support and glTF validator.\r\n     * Defaults to false.\r\n     */\r\n    public useRangeRequests = false;\r\n\r\n    /**\r\n     * Defines if the loader should create instances when multiple glTF nodes point to the same glTF mesh. Defaults to true.\r\n     */\r\n    public createInstances = true;\r\n\r\n    /**\r\n     * Defines if the loader should always compute the bounding boxes of meshes and not use the min/max values from the position accessor. Defaults to false.\r\n     */\r\n    public alwaysComputeBoundingBox = false;\r\n\r\n    /**\r\n     * If true, load all materials defined in the file, even if not used by any mesh. Defaults to false.\r\n     */\r\n    public loadAllMaterials = false;\r\n\r\n    /**\r\n     * If true, load only the materials defined in the file. Defaults to false.\r\n     */\r\n    public loadOnlyMaterials = false;\r\n\r\n    /**\r\n     * If true, do not load any materials defined in the file. Defaults to false.\r\n     */\r\n    public skipMaterials = false;\r\n\r\n    /**\r\n     * If true, load the color (gamma encoded) textures into sRGB buffers (if supported by the GPU), which will yield more accurate results when sampling the texture. Defaults to true.\r\n     */\r\n    public useSRGBBuffers = true;\r\n\r\n    /**\r\n     * When loading glTF animations, which are defined in seconds, target them to this FPS. Defaults to 60.\r\n     */\r\n    public targetFps = 60;\r\n\r\n    /**\r\n     * Defines if the loader should always compute the nearest common ancestor of the skeleton joints instead of using `skin.skeleton`. Defaults to false.\r\n     * Set this to true if loading assets with invalid `skin.skeleton` values.\r\n     */\r\n    public alwaysComputeSkeletonRootNode = false;\r\n\r\n    /**\r\n     * If true, the loader will derive the name for Babylon textures from the glTF texture name, image name, or image url. Defaults to false.\r\n     * Note that it is possible for multiple Babylon textures to share the same name when the Babylon textures load from the same glTF texture or image.\r\n     */\r\n    public useGltfTextureNames = false;\r\n\r\n    /**\r\n     * Function called before loading a url referenced by the asset.\r\n     * @param url url referenced by the asset\r\n     * @returns Async url to load\r\n     */\r\n    public preprocessUrlAsync = (url: string) => Promise.resolve(url);\r\n\r\n    /**\r\n     * Defines the node to use as the root of the hierarchy when loading the scene (default: undefined). If not defined, a root node will be automatically created.\r\n     * You can also pass null if you don't want a root node to be created.\r\n     */\r\n    public customRootNode?: Nullable<TransformNode>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the callback is called as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public abstract onMeshLoaded?: ((mesh: AbstractMesh) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     */\r\n    public abstract onSkinLoaded?: ((node: TransformNode, skinnedNode: TransformNode) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public abstract onTextureLoaded?: ((texture: BaseTexture) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public abstract onMaterialLoaded?: ((material: Material) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public abstract onCameraLoaded?: ((camera: Camera) => void) | undefined;\r\n\r\n    /**\r\n     * Defines options for glTF extensions.\r\n     */\r\n    public extensionOptions: {\r\n        // NOTE: This type is doing two things:\r\n        // 1. Adding an implicit 'enabled' property to the options for each extension.\r\n        // 2. Creating a mapped type of all the options of all the extensions to make it just look like a consolidated plain object in intellisense for the user.\r\n        [Extension in keyof GLTFLoaderExtensionOptions]?: {\r\n            [Option in keyof DefaultExtensionOptions<GLTFLoaderExtensionOptions[Extension]>]: DefaultExtensionOptions<GLTFLoaderExtensionOptions[Extension]>[Option];\r\n        };\r\n    } = {};\r\n}\r\n\r\n/**\r\n * File loader for loading glTF files into a scene.\r\n */\r\nexport class GLTFFileLoader extends GLTFLoaderOptions implements IDisposable, ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /** @internal */\r\n    public static _CreateGLTF1Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /** @internal */\r\n    public static _CreateGLTF2Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /**\r\n     * Creates a new glTF file loader.\r\n     * @param options The options for the loader\r\n     */\r\n    public constructor(options?: Partial<Readonly<GLTFLoaderOptions>>) {\r\n        super();\r\n        this.copyFrom(options);\r\n    }\r\n\r\n    // --------------------\r\n    // Begin Common options\r\n    // --------------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public onParsedObservable = new Observable<IGLTFLoaderData>();\r\n\r\n    private _onParsedObserver: Nullable<Observer<IGLTFLoaderData>>;\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public set onParsed(callback: ((loaderData: IGLTFLoaderData) => void) | undefined) {\r\n        if (this._onParsedObserver) {\r\n            this.onParsedObservable.remove(this._onParsedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onParsedObserver = this.onParsedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    // ------------------\r\n    // End Common options\r\n    // ------------------\r\n\r\n    // ----------------\r\n    // Begin V1 options\r\n    // ----------------\r\n\r\n    /**\r\n     * Set this property to false to disable incremental loading which delays the loader from calling the success callback until after loading the meshes and shaders.\r\n     * Textures always loads asynchronously. For example, the success callback can compute the bounding information of the loaded meshes when incremental loading is disabled.\r\n     * Defaults to true.\r\n     * @internal\r\n     */\r\n    public static IncrementalLoading = true;\r\n\r\n    /**\r\n     * Set this property to true in order to work with homogeneous coordinates, available with some converters and exporters.\r\n     * Defaults to false. See https://en.wikipedia.org/wiki/Homogeneous_coordinates.\r\n     * @internal\r\n     */\r\n    public static HomogeneousCoordinates = false;\r\n\r\n    // --------------\r\n    // End V1 options\r\n    // --------------\r\n\r\n    /**\r\n     * Observable raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the observable is raised as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public readonly onMeshLoadedObservable = new Observable<AbstractMesh>();\r\n\r\n    private _onMeshLoadedObserver: Nullable<Observer<AbstractMesh>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the callback is called as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public set onMeshLoaded(callback: ((mesh: AbstractMesh) => void) | undefined) {\r\n        if (this._onMeshLoadedObserver) {\r\n            this.onMeshLoadedObservable.remove(this._onMeshLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onMeshLoadedObserver = this.onMeshLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     * @param node - the transform node that corresponds to the original glTF skin node used for animations\r\n     * @param skinnedNode - the transform node that is the skinned mesh itself or the parent of the skinned meshes\r\n     */\r\n    public readonly onSkinLoadedObservable = new Observable<{ node: TransformNode; skinnedNode: TransformNode }>();\r\n\r\n    private _onSkinLoadedObserver: Nullable<Observer<{ node: TransformNode; skinnedNode: TransformNode }>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     */\r\n    public set onSkinLoaded(callback: ((node: TransformNode, skinnedNode: TransformNode) => void) | undefined) {\r\n        if (this._onSkinLoadedObserver) {\r\n            this.onSkinLoadedObservable.remove(this._onSkinLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onSkinLoadedObserver = this.onSkinLoadedObservable.add((data) => callback(data.node, data.skinnedNode));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public readonly onTextureLoadedObservable = new Observable<BaseTexture>();\r\n\r\n    private _onTextureLoadedObserver: Nullable<Observer<BaseTexture>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public set onTextureLoaded(callback: ((texture: BaseTexture) => void) | undefined) {\r\n        if (this._onTextureLoadedObserver) {\r\n            this.onTextureLoadedObservable.remove(this._onTextureLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onTextureLoadedObserver = this.onTextureLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public readonly onMaterialLoadedObservable = new Observable<Material>();\r\n\r\n    private _onMaterialLoadedObserver: Nullable<Observer<Material>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public set onMaterialLoaded(callback: ((material: Material) => void) | undefined) {\r\n        if (this._onMaterialLoadedObserver) {\r\n            this.onMaterialLoadedObservable.remove(this._onMaterialLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onMaterialLoadedObserver = this.onMaterialLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public readonly onCameraLoadedObservable = new Observable<Camera>();\r\n\r\n    private _onCameraLoadedObserver: Nullable<Observer<Camera>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public set onCameraLoaded(callback: ((camera: Camera) => void) | undefined) {\r\n        if (this._onCameraLoadedObserver) {\r\n            this.onCameraLoadedObservable.remove(this._onCameraLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onCameraLoadedObserver = this.onCameraLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public readonly onCompleteObservable = new Observable<void>();\r\n\r\n    private _onCompleteObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public set onComplete(callback: () => void) {\r\n        if (this._onCompleteObserver) {\r\n            this.onCompleteObservable.remove(this._onCompleteObserver);\r\n        }\r\n        this._onCompleteObserver = this.onCompleteObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when an error occurs.\r\n     */\r\n    public readonly onErrorObservable = new Observable<any>();\r\n\r\n    private _onErrorObserver: Nullable<Observer<any>>;\r\n\r\n    /**\r\n     * Callback raised when an error occurs.\r\n     */\r\n    public set onError(callback: (reason: any) => void) {\r\n        if (this._onErrorObserver) {\r\n            this.onErrorObservable.remove(this._onErrorObserver);\r\n        }\r\n        this._onErrorObserver = this.onErrorObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after the loader is disposed.\r\n     */\r\n    public readonly onDisposeObservable = new Observable<void>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised after the loader is disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after a loader extension is created.\r\n     * Set additional options for a loader extension in this event.\r\n     */\r\n    public readonly onExtensionLoadedObservable = new Observable<IGLTFLoaderExtension>();\r\n\r\n    private _onExtensionLoadedObserver: Nullable<Observer<IGLTFLoaderExtension>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onExtensionLoaded(callback: (extension: IGLTFLoaderExtension) => void) {\r\n        if (this._onExtensionLoadedObserver) {\r\n            this.onExtensionLoadedObservable.remove(this._onExtensionLoadedObserver);\r\n        }\r\n        this._onExtensionLoadedObserver = this.onExtensionLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader logging is enabled.\r\n     */\r\n    public get loggingEnabled(): boolean {\r\n        return this._loggingEnabled;\r\n    }\r\n\r\n    public set loggingEnabled(value: boolean) {\r\n        if (this._loggingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._loggingEnabled = value;\r\n\r\n        if (this._loggingEnabled) {\r\n            this._log = this._logEnabled;\r\n        } else {\r\n            this._log = this._logDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should capture performance counters.\r\n     */\r\n    public get capturePerformanceCounters(): boolean {\r\n        return this._capturePerformanceCounters;\r\n    }\r\n\r\n    public set capturePerformanceCounters(value: boolean) {\r\n        if (this._capturePerformanceCounters === value) {\r\n            return;\r\n        }\r\n\r\n        this._capturePerformanceCounters = value;\r\n\r\n        if (this._capturePerformanceCounters) {\r\n            this._startPerformanceCounter = this._startPerformanceCounterEnabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterEnabled;\r\n        } else {\r\n            this._startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should validate the asset.\r\n     */\r\n    public validate = false;\r\n\r\n    /**\r\n     * Observable raised after validation when validate is set to true. The event data is the result of the validation.\r\n     */\r\n    public readonly onValidatedObservable = new Observable<GLTF2.IGLTFValidationResults>();\r\n\r\n    private _onValidatedObserver: Nullable<Observer<GLTF2.IGLTFValidationResults>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onValidated(callback: (results: GLTF2.IGLTFValidationResults) => void) {\r\n        if (this._onValidatedObserver) {\r\n            this.onValidatedObservable.remove(this._onValidatedObserver);\r\n        }\r\n        this._onValidatedObserver = this.onValidatedObservable.add(callback);\r\n    }\r\n\r\n    private _loader: Nullable<IGLTFLoader> = null;\r\n    private _state: Nullable<GLTFLoaderState> = null;\r\n    private _progressCallback?: (event: ISceneLoaderProgressEvent) => void;\r\n    private _requests = new Array<IFileRequestInfo>();\r\n\r\n    /**\r\n     * Name of the loader (\"gltf\")\r\n     */\r\n    public readonly name = GLTFFileLoaderMetadata.name;\r\n\r\n    /** @internal */\r\n    public readonly extensions = GLTFFileLoaderMetadata.extensions;\r\n\r\n    /**\r\n     * Disposes the loader, releases resources during load, and cancels any outstanding requests.\r\n     */\r\n    public dispose(): void {\r\n        if (this._loader) {\r\n            this._loader.dispose();\r\n            this._loader = null;\r\n        }\r\n\r\n        for (const request of this._requests) {\r\n            request.abort();\r\n        }\r\n\r\n        this._requests.length = 0;\r\n\r\n        delete this._progressCallback;\r\n\r\n        this.preprocessUrlAsync = (url) => Promise.resolve(url);\r\n\r\n        this.onMeshLoadedObservable.clear();\r\n        this.onSkinLoadedObservable.clear();\r\n        this.onTextureLoadedObservable.clear();\r\n        this.onMaterialLoadedObservable.clear();\r\n        this.onCameraLoadedObservable.clear();\r\n        this.onCompleteObservable.clear();\r\n        this.onExtensionLoadedObservable.clear();\r\n\r\n        this.onDisposeObservable.notifyObservers(undefined);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadFile(\r\n        scene: Scene,\r\n        fileOrUrl: File | string | ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onProgress?: (ev: ISceneLoaderProgressEvent) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        name?: string\r\n    ): Nullable<IFileRequest> {\r\n        if (ArrayBuffer.isView(fileOrUrl)) {\r\n            this._loadBinary(scene, fileOrUrl as ArrayBufferView, rootUrl, onSuccess, onError, name);\r\n            return null;\r\n        }\r\n\r\n        this._progressCallback = onProgress;\r\n\r\n        const fileName = (fileOrUrl as File).name || Tools.GetFilename(fileOrUrl as string);\r\n\r\n        if (useArrayBuffer) {\r\n            if (this.useRangeRequests) {\r\n                if (this.validate) {\r\n                    Logger.Warn(\"glTF validation is not supported when range requests are enabled\");\r\n                }\r\n\r\n                const fileRequest: IFileRequest = {\r\n                    abort: () => {},\r\n                    onCompleteObservable: new Observable<IFileRequest>(),\r\n                };\r\n\r\n                const dataBuffer = {\r\n                    readAsync: (byteOffset: number, byteLength: number) => {\r\n                        return new Promise<ArrayBufferView>((resolve, reject) => {\r\n                            this._loadFile(\r\n                                scene,\r\n                                fileOrUrl as File | string,\r\n                                (data) => {\r\n                                    resolve(new Uint8Array(data as ArrayBuffer));\r\n                                },\r\n                                true,\r\n                                (error) => {\r\n                                    reject(error);\r\n                                },\r\n                                (webRequest) => {\r\n                                    webRequest.setRequestHeader(\"Range\", `bytes=${byteOffset}-${byteOffset + byteLength - 1}`);\r\n                                }\r\n                            );\r\n                        });\r\n                    },\r\n                    byteLength: 0,\r\n                };\r\n\r\n                this._unpackBinaryAsync(new DataReader(dataBuffer)).then(\r\n                    (loaderData) => {\r\n                        fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n                        onSuccess(loaderData);\r\n                    },\r\n                    onError ? (error) => onError(undefined, error) : undefined\r\n                );\r\n\r\n                return fileRequest;\r\n            }\r\n\r\n            return this._loadFile(\r\n                scene,\r\n                fileOrUrl as File | string,\r\n                (data) => {\r\n                    this._validate(scene, new Uint8Array(data as ArrayBuffer, 0, (data as ArrayBuffer).byteLength), rootUrl, fileName);\r\n                    this._unpackBinaryAsync(\r\n                        new DataReader({\r\n                            readAsync: (byteOffset, byteLength) => readAsync(data as ArrayBuffer, byteOffset, byteLength),\r\n                            byteLength: (data as ArrayBuffer).byteLength,\r\n                        })\r\n                    ).then(\r\n                        (loaderData) => {\r\n                            onSuccess(loaderData);\r\n                        },\r\n                        onError ? (error) => onError(undefined, error) : undefined\r\n                    );\r\n                },\r\n                true,\r\n                onError\r\n            );\r\n        } else {\r\n            return this._loadFile(\r\n                scene,\r\n                fileOrUrl,\r\n                (data) => {\r\n                    try {\r\n                        this._validate(scene, data as string, rootUrl, fileName);\r\n                        onSuccess({ json: this._parseJson(data as string) });\r\n                    } catch {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                },\r\n                false,\r\n                onError\r\n            );\r\n        }\r\n    }\r\n\r\n    private _loadBinary(\r\n        scene: Scene,\r\n        data: ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        fileName?: string\r\n    ): void {\r\n        this._validate(scene, new Uint8Array(data.buffer, data.byteOffset, data.byteLength), rootUrl, fileName);\r\n        this._unpackBinaryAsync(\r\n            new DataReader({\r\n                readAsync: (byteOffset, byteLength) => readViewAsync(data, byteOffset, byteLength),\r\n                byteLength: data.byteLength,\r\n            })\r\n        ).then(\r\n            (loaderData) => {\r\n                onSuccess(loaderData);\r\n            },\r\n            onError ? (error) => onError(undefined, error) : undefined\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.importMeshAsync(meshesNames, scene, null, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<void> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.loadAsync(scene, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAssetContainerAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<AssetContainer> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n\r\n            // Prepare the asset container.\r\n            const container = new AssetContainer(scene);\r\n\r\n            // Get materials/textures when loading to add to container\r\n            const materials: Array<Material> = [];\r\n            this.onMaterialLoadedObservable.add((material) => {\r\n                materials.push(material);\r\n            });\r\n            const textures: Array<BaseTexture> = [];\r\n            this.onTextureLoadedObservable.add((texture) => {\r\n                textures.push(texture);\r\n            });\r\n            const cameras: Array<Camera> = [];\r\n            this.onCameraLoadedObservable.add((camera) => {\r\n                cameras.push(camera);\r\n            });\r\n\r\n            const morphTargetManagers: Array<MorphTargetManager> = [];\r\n            this.onMeshLoadedObservable.add((mesh) => {\r\n                if (mesh.morphTargetManager) {\r\n                    morphTargetManagers.push(mesh.morphTargetManager);\r\n                }\r\n            });\r\n\r\n            return this._loader.importMeshAsync(null, scene, container, data, rootUrl, onProgress, fileName).then((result) => {\r\n                Array.prototype.push.apply(container.geometries, result.geometries);\r\n                Array.prototype.push.apply(container.meshes, result.meshes);\r\n                Array.prototype.push.apply(container.particleSystems, result.particleSystems);\r\n                Array.prototype.push.apply(container.skeletons, result.skeletons);\r\n                Array.prototype.push.apply(container.animationGroups, result.animationGroups);\r\n                Array.prototype.push.apply(container.materials, materials);\r\n                Array.prototype.push.apply(container.textures, textures);\r\n                Array.prototype.push.apply(container.lights, result.lights);\r\n                Array.prototype.push.apply(container.transformNodes, result.transformNodes);\r\n                Array.prototype.push.apply(container.cameras, cameras);\r\n                Array.prototype.push.apply(container.morphTargetManagers, morphTargetManagers);\r\n                return container;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public canDirectLoad(data: string): boolean {\r\n        return GLTFFileLoaderMetadata.canDirectLoad(data);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public directLoad(scene: Scene, data: string): Promise<Object> {\r\n        if (\r\n            data.startsWith(\"base64,\" + GLTFMagicBase64Encoded) || // this is technically incorrect, but will continue to support for backcompat.\r\n            data.startsWith(\";base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"application/octet-stream;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"model/gltf-binary;base64,\" + GLTFMagicBase64Encoded)\r\n        ) {\r\n            const arrayBuffer = DecodeBase64UrlToBinary(data);\r\n\r\n            this._validate(scene, new Uint8Array(arrayBuffer, 0, arrayBuffer.byteLength));\r\n            return this._unpackBinaryAsync(\r\n                new DataReader({\r\n                    readAsync: (byteOffset, byteLength) => readAsync(arrayBuffer, byteOffset, byteLength),\r\n                    byteLength: arrayBuffer.byteLength,\r\n                })\r\n            );\r\n        }\r\n\r\n        this._validate(scene, data);\r\n        return Promise.resolve({ json: this._parseJson(data) });\r\n    }\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    public rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n\r\n    /** @internal */\r\n    public createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPluginAsync {\r\n        return new GLTFFileLoader(options[GLTFFileLoaderMetadata.name]);\r\n    }\r\n\r\n    /**\r\n     * The loader state or null if the loader is not active.\r\n     */\r\n    public get loaderState(): Nullable<GLTFLoaderState> {\r\n        return this._state;\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader state changes.\r\n     */\r\n    public onLoaderStateChangedObservable = new Observable<Nullable<GLTFLoaderState>>();\r\n\r\n    /**\r\n     * Returns a promise that resolves when the asset is completely loaded.\r\n     * @returns a promise that resolves when the asset is completely loaded.\r\n     */\r\n    public whenCompleteAsync(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onCompleteObservable.addOnce(() => {\r\n                resolve();\r\n            });\r\n            this.onErrorObservable.addOnce((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setState(state: GLTFLoaderState): void {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n\r\n        this._state = state;\r\n        this.onLoaderStateChangedObservable.notifyObservers(this._state);\r\n        this._log(GLTFLoaderState[this._state]);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFile(\r\n        scene: Scene,\r\n        fileOrUrl: File | string,\r\n        onSuccess: (data: string | ArrayBuffer) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest) => void,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): IFileRequest {\r\n        const request = scene._loadFile(\r\n            fileOrUrl,\r\n            onSuccess,\r\n            (event) => {\r\n                this._onProgress(event, request);\r\n            },\r\n            true,\r\n            useArrayBuffer,\r\n            onError,\r\n            onOpened\r\n        ) as IFileRequestInfo;\r\n        request.onCompleteObservable.add(() => {\r\n            // Force the length computable to be true since we can guarantee the data is loaded.\r\n            request._lengthComputable = true;\r\n            request._total = request._loaded;\r\n        });\r\n        this._requests.push(request);\r\n        return request;\r\n    }\r\n\r\n    private _onProgress(event: ProgressEvent, request: IFileRequestInfo): void {\r\n        if (!this._progressCallback) {\r\n            return;\r\n        }\r\n\r\n        request._lengthComputable = event.lengthComputable;\r\n        request._loaded = event.loaded;\r\n        request._total = event.total;\r\n\r\n        let lengthComputable = true;\r\n        let loaded = 0;\r\n        let total = 0;\r\n        for (const request of this._requests) {\r\n            if (request._lengthComputable === undefined || request._loaded === undefined || request._total === undefined) {\r\n                return;\r\n            }\r\n\r\n            lengthComputable = lengthComputable && request._lengthComputable;\r\n            loaded += request._loaded;\r\n            total += request._total;\r\n        }\r\n\r\n        this._progressCallback({\r\n            lengthComputable: lengthComputable,\r\n            loaded: loaded,\r\n            total: lengthComputable ? total : 0,\r\n        });\r\n    }\r\n\r\n    private _validate(scene: Scene, data: string | Uint8Array, rootUrl = \"\", fileName = \"\"): void {\r\n        if (!this.validate) {\r\n            return;\r\n        }\r\n\r\n        this._startPerformanceCounter(\"Validate JSON\");\r\n        GLTFValidation.ValidateAsync(data, rootUrl, fileName, (uri) => {\r\n            return this.preprocessUrlAsync(rootUrl + uri).then((url) => {\r\n                return scene._loadFileAsync(url, undefined, true, true).then((data) => {\r\n                    return new Uint8Array(data, 0, data.byteLength);\r\n                });\r\n            });\r\n        }).then(\r\n            (result) => {\r\n                this._endPerformanceCounter(\"Validate JSON\");\r\n                this.onValidatedObservable.notifyObservers(result);\r\n                this.onValidatedObservable.clear();\r\n            },\r\n            (reason) => {\r\n                this._endPerformanceCounter(\"Validate JSON\");\r\n                Tools.Warn(`Failed to validate: ${reason.message}`);\r\n                this.onValidatedObservable.clear();\r\n            }\r\n        );\r\n    }\r\n\r\n    private _getLoader(loaderData: IGLTFLoaderData): IGLTFLoader {\r\n        const asset = (<any>loaderData.json).asset || {};\r\n\r\n        this._log(`Asset version: ${asset.version}`);\r\n        asset.minVersion && this._log(`Asset minimum version: ${asset.minVersion}`);\r\n        asset.generator && this._log(`Asset generator: ${asset.generator}`);\r\n\r\n        const version = GLTFFileLoader._parseVersion(asset.version);\r\n        if (!version) {\r\n            throw new Error(\"Invalid version: \" + asset.version);\r\n        }\r\n\r\n        if (asset.minVersion !== undefined) {\r\n            const minVersion = GLTFFileLoader._parseVersion(asset.minVersion);\r\n            if (!minVersion) {\r\n                throw new Error(\"Invalid minimum version: \" + asset.minVersion);\r\n            }\r\n\r\n            if (GLTFFileLoader._compareVersion(minVersion, { major: 2, minor: 0 }) > 0) {\r\n                throw new Error(\"Incompatible minimum version: \" + asset.minVersion);\r\n            }\r\n        }\r\n\r\n        const createLoaders: { [key: number]: (parent: GLTFFileLoader) => IGLTFLoader } = {\r\n            1: GLTFFileLoader._CreateGLTF1Loader,\r\n            2: GLTFFileLoader._CreateGLTF2Loader,\r\n        };\r\n\r\n        const createLoader = createLoaders[version.major];\r\n        if (!createLoader) {\r\n            throw new Error(\"Unsupported version: \" + asset.version);\r\n        }\r\n\r\n        return createLoader(this);\r\n    }\r\n\r\n    private _parseJson(json: string): Object {\r\n        this._startPerformanceCounter(\"Parse JSON\");\r\n        this._log(`JSON length: ${json.length}`);\r\n        const parsed = JSON.parse(json);\r\n        this._endPerformanceCounter(\"Parse JSON\");\r\n        return parsed;\r\n    }\r\n\r\n    private _unpackBinaryAsync(dataReader: DataReader): Promise<IGLTFLoaderData> {\r\n        this._startPerformanceCounter(\"Unpack Binary\");\r\n\r\n        // Read magic + version + length + json length + json format\r\n        return dataReader.loadAsync(20).then(() => {\r\n            const Binary = {\r\n                Magic: 0x46546c67,\r\n            };\r\n\r\n            const magic = dataReader.readUint32();\r\n            if (magic !== Binary.Magic) {\r\n                throw new RuntimeError(\"Unexpected magic: \" + magic, ErrorCodes.GLTFLoaderUnexpectedMagicError);\r\n            }\r\n\r\n            const version = dataReader.readUint32();\r\n\r\n            if (this.loggingEnabled) {\r\n                this._log(`Binary version: ${version}`);\r\n            }\r\n\r\n            const length = dataReader.readUint32();\r\n            if (!this.useRangeRequests && length !== dataReader.buffer.byteLength) {\r\n                Logger.Warn(`Length in header does not match actual data length: ${length} != ${dataReader.buffer.byteLength}`);\r\n            }\r\n\r\n            let unpacked: Promise<IGLTFLoaderData>;\r\n            switch (version) {\r\n                case 1: {\r\n                    unpacked = this._unpackBinaryV1Async(dataReader, length);\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    unpacked = this._unpackBinaryV2Async(dataReader, length);\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new Error(\"Unsupported version: \" + version);\r\n                }\r\n            }\r\n\r\n            this._endPerformanceCounter(\"Unpack Binary\");\r\n\r\n            return unpacked;\r\n        });\r\n    }\r\n\r\n    private _unpackBinaryV1Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ContentFormat = {\r\n            JSON: 0,\r\n        };\r\n\r\n        const contentLength = dataReader.readUint32();\r\n        const contentFormat = dataReader.readUint32();\r\n\r\n        if (contentFormat !== ContentFormat.JSON) {\r\n            throw new Error(`Unexpected content format: ${contentFormat}`);\r\n        }\r\n\r\n        const bodyLength = length - dataReader.byteOffset;\r\n\r\n        const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(contentLength)), bin: null };\r\n        if (bodyLength !== 0) {\r\n            const startByteOffset = dataReader.byteOffset;\r\n            data.bin = {\r\n                readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                byteLength: bodyLength,\r\n            };\r\n        }\r\n\r\n        return Promise.resolve(data);\r\n    }\r\n\r\n    private _unpackBinaryV2Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ChunkFormat = {\r\n            JSON: 0x4e4f534a,\r\n            BIN: 0x004e4942,\r\n        };\r\n\r\n        // Read the JSON chunk header.\r\n        const chunkLength = dataReader.readUint32();\r\n        const chunkFormat = dataReader.readUint32();\r\n        if (chunkFormat !== ChunkFormat.JSON) {\r\n            throw new Error(\"First chunk format is not JSON\");\r\n        }\r\n\r\n        // Bail if there are no other chunks.\r\n        if (dataReader.byteOffset + chunkLength === length) {\r\n            return dataReader.loadAsync(chunkLength).then(() => {\r\n                return { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n            });\r\n        }\r\n\r\n        // Read the JSON chunk and the length and type of the next chunk.\r\n        return dataReader.loadAsync(chunkLength + 8).then(() => {\r\n            const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n\r\n            const readAsync = (): Promise<IGLTFLoaderData> => {\r\n                const chunkLength = dataReader.readUint32();\r\n                const chunkFormat = dataReader.readUint32();\r\n\r\n                switch (chunkFormat) {\r\n                    case ChunkFormat.JSON: {\r\n                        throw new Error(\"Unexpected JSON chunk\");\r\n                    }\r\n                    case ChunkFormat.BIN: {\r\n                        const startByteOffset = dataReader.byteOffset;\r\n                        data.bin = {\r\n                            readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                            byteLength: chunkLength,\r\n                        };\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        // ignore unrecognized chunkFormat\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (dataReader.byteOffset !== length) {\r\n                    return dataReader.loadAsync(8).then(readAsync);\r\n                }\r\n\r\n                return Promise.resolve(data);\r\n            };\r\n\r\n            return readAsync();\r\n        });\r\n    }\r\n\r\n    private static _parseVersion(version: string): Nullable<{ major: number; minor: number }> {\r\n        if (version === \"1.0\" || version === \"1.0.1\") {\r\n            return {\r\n                major: 1,\r\n                minor: 0,\r\n            };\r\n        }\r\n\r\n        const match = (version + \"\").match(/^(\\d+)\\.(\\d+)/);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            major: parseInt(match[1]),\r\n            minor: parseInt(match[2]),\r\n        };\r\n    }\r\n\r\n    private static _compareVersion(a: { major: number; minor: number }, b: { major: number; minor: number }): number {\r\n        if (a.major > b.major) {\r\n            return 1;\r\n        }\r\n        if (a.major < b.major) {\r\n            return -1;\r\n        }\r\n        if (a.minor > b.minor) {\r\n            return 1;\r\n        }\r\n        if (a.minor < b.minor) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private static readonly _logSpaces = \"                                \";\r\n    private _logIndentLevel = 0;\r\n    private _loggingEnabled = false;\r\n\r\n    /** @internal */\r\n    public _log = this._logDisabled;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _logOpen(message: string): void {\r\n        this._log(message);\r\n        this._logIndentLevel++;\r\n    }\r\n\r\n    /** @internal */\r\n    public _logClose(): void {\r\n        --this._logIndentLevel;\r\n    }\r\n\r\n    private _logEnabled(message: string): void {\r\n        const spaces = GLTFFileLoader._logSpaces.substring(0, this._logIndentLevel * 2);\r\n        Logger.Log(`${spaces}${message}`);\r\n    }\r\n\r\n    private _logDisabled(message: string): void {}\r\n\r\n    private _capturePerformanceCounters = false;\r\n\r\n    /** @internal */\r\n    public _startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n\r\n    /** @internal */\r\n    public _endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n\r\n    private _startPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.StartPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _startPerformanceCounterDisabled(counterName: string): void {}\r\n\r\n    private _endPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.EndPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _endPerformanceCounterDisabled(counterName: string): void {}\r\n}\r\n\r\nRegisterSceneLoaderPlugin(new GLTFFileLoader());\r\n","// eslint-disable-next-line import/no-internal-modules\r\nimport type { ISceneLoaderPluginExtensions, ISceneLoaderPluginMetadata } from \"core/index\";\r\n\r\nexport const GLTFMagicBase64Encoded = \"Z2xURg\"; // \"glTF\" base64 encoded (without the quotes!)\r\n\r\nexport const GLTFFileLoaderMetadata = {\r\n    name: \"gltf\",\r\n\r\n    extensions: {\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".gltf\": { isBinary: false, mimeType: \"model/gltf+json\" },\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".glb\": { isBinary: true, mimeType: \"model/gltf-binary\" },\r\n    } as const satisfies ISceneLoaderPluginExtensions,\r\n\r\n    canDirectLoad(data: string): boolean {\r\n        return (\r\n            (data.indexOf(\"asset\") !== -1 && data.indexOf(\"version\") !== -1) ||\r\n            data.startsWith(\"data:base64,\" + GLTFMagicBase64Encoded) || // this is technically incorrect, but will continue to support for backcompat.\r\n            data.startsWith(\"data:;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"data:application/octet-stream;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"data:model/gltf-binary;base64,\" + GLTFMagicBase64Encoded)\r\n        );\r\n    },\r\n} as const satisfies ISceneLoaderPluginMetadata;\r\n","import * as FileLoader from \"loaders/glTF/glTFFileLoader\";\r\nimport * as Validation from \"loaders/glTF/glTFValidation\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    for (const key in FileLoader) {\r\n        (<any>globalObject).BABYLON[key] = (<any>FileLoader)[key];\r\n    }\r\n    for (const key in Validation) {\r\n        (<any>globalObject).BABYLON[key] = (<any>Validation)[key];\r\n    }\r\n}\r\n\r\nexport * from \"loaders/glTF/glTFFileLoader\";\r\nexport * from \"loaders/glTF/glTFValidation\";\r\n","import type { AssetContainer } from \"core/assetContainer\";\r\nimport type { Bone } from \"core/Bones/bone\";\r\nimport type { Skeleton } from \"core/Bones/skeleton\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Enums\r\n * @internal\r\n */\r\nexport enum EComponentType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    FLOAT = 5126,\r\n}\r\n\r\n/** @internal */\r\nexport enum EShaderType {\r\n    FRAGMENT = 35632,\r\n    VERTEX = 35633,\r\n}\r\n\r\n/** @internal */\r\nexport enum EParameterType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    INT = 5124,\r\n    UNSIGNED_INT = 5125,\r\n    FLOAT = 5126,\r\n    FLOAT_VEC2 = 35664,\r\n    FLOAT_VEC3 = 35665,\r\n    FLOAT_VEC4 = 35666,\r\n    INT_VEC2 = 35667,\r\n    INT_VEC3 = 35668,\r\n    INT_VEC4 = 35669,\r\n    BOOL = 35670,\r\n    BOOL_VEC2 = 35671,\r\n    BOOL_VEC3 = 35672,\r\n    BOOL_VEC4 = 35673,\r\n    FLOAT_MAT2 = 35674,\r\n    FLOAT_MAT3 = 35675,\r\n    FLOAT_MAT4 = 35676,\r\n    SAMPLER_2D = 35678,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureWrapMode {\r\n    CLAMP_TO_EDGE = 33071,\r\n    MIRRORED_REPEAT = 33648,\r\n    REPEAT = 10497,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureFilterType {\r\n    NEAREST = 9728,\r\n    LINEAR = 9728,\r\n    NEAREST_MIPMAP_NEAREST = 9984,\r\n    LINEAR_MIPMAP_NEAREST = 9985,\r\n    NEAREST_MIPMAP_LINEAR = 9986,\r\n    LINEAR_MIPMAP_LINEAR = 9987,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureFormat {\r\n    ALPHA = 6406,\r\n    RGB = 6407,\r\n    RGBA = 6408,\r\n    LUMINANCE = 6409,\r\n    LUMINANCE_ALPHA = 6410,\r\n}\r\n\r\n/** @internal */\r\nexport enum ECullingType {\r\n    FRONT = 1028,\r\n    BACK = 1029,\r\n    FRONT_AND_BACK = 1032,\r\n}\r\n\r\n/** @internal */\r\nexport enum EBlendingFunction {\r\n    ZERO = 0,\r\n    ONE = 1,\r\n    SRC_COLOR = 768,\r\n    ONE_MINUS_SRC_COLOR = 769,\r\n    DST_COLOR = 774,\r\n    ONE_MINUS_DST_COLOR = 775,\r\n    SRC_ALPHA = 770,\r\n    ONE_MINUS_SRC_ALPHA = 771,\r\n    DST_ALPHA = 772,\r\n    ONE_MINUS_DST_ALPHA = 773,\r\n    CONSTANT_COLOR = 32769,\r\n    ONE_MINUS_CONSTANT_COLOR = 32770,\r\n    CONSTANT_ALPHA = 32771,\r\n    ONE_MINUS_CONSTANT_ALPHA = 32772,\r\n    SRC_ALPHA_SATURATE = 776,\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFProperty {\r\n    extensions?: { [key: string]: any };\r\n    extras?: Object;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFChildRootProperty extends IGLTFProperty {\r\n    name?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAccessor extends IGLTFChildRootProperty {\r\n    bufferView: string;\r\n    byteOffset: number;\r\n    byteStride: number;\r\n    count: number;\r\n    type: string;\r\n    componentType: EComponentType;\r\n\r\n    max?: number[];\r\n    min?: number[];\r\n    name?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFBufferView extends IGLTFChildRootProperty {\r\n    buffer: string;\r\n    byteOffset: number;\r\n    byteLength: number;\r\n    byteStride: number;\r\n\r\n    target?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFBuffer extends IGLTFChildRootProperty {\r\n    uri: string;\r\n\r\n    byteLength?: number;\r\n    type?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFShader extends IGLTFChildRootProperty {\r\n    uri: string;\r\n    type: EShaderType;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFProgram extends IGLTFChildRootProperty {\r\n    attributes: string[];\r\n    fragmentShader: string;\r\n    vertexShader: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueParameter {\r\n    type: number;\r\n\r\n    count?: number;\r\n    semantic?: string;\r\n    node?: string;\r\n    value?: number | boolean | string | Array<any>;\r\n    source?: string;\r\n\r\n    babylonValue?: any;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueCommonProfile {\r\n    lightingModel: string;\r\n    texcoordBindings: Object;\r\n\r\n    parameters?: Array<any>;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueStatesFunctions {\r\n    blendColor?: number[];\r\n    blendEquationSeparate?: number[];\r\n    blendFuncSeparate?: number[];\r\n    colorMask: boolean[];\r\n    cullFace: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueStates {\r\n    enable: number[];\r\n    functions: IGLTFTechniqueStatesFunctions;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechnique extends IGLTFChildRootProperty {\r\n    parameters: { [key: string]: IGLTFTechniqueParameter };\r\n    program: string;\r\n\r\n    attributes: { [key: string]: string };\r\n    uniforms: { [key: string]: string };\r\n    states: IGLTFTechniqueStates;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMaterial extends IGLTFChildRootProperty {\r\n    technique?: string;\r\n    values: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMeshPrimitive extends IGLTFProperty {\r\n    attributes: { [key: string]: string };\r\n    indices: string;\r\n    material: string;\r\n\r\n    mode?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMesh extends IGLTFChildRootProperty {\r\n    primitives: IGLTFMeshPrimitive[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFImage extends IGLTFChildRootProperty {\r\n    uri: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSampler extends IGLTFChildRootProperty {\r\n    magFilter?: number;\r\n    minFilter?: number;\r\n    wrapS?: number;\r\n    wrapT?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTexture extends IGLTFChildRootProperty {\r\n    sampler: string;\r\n    source: string;\r\n\r\n    format?: ETextureFormat;\r\n    internalFormat?: ETextureFormat;\r\n    target?: number;\r\n    type?: number;\r\n\r\n    // Babylon.js values (optimize)\r\n    babylonTexture?: Texture;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAmbienLight {\r\n    color?: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFDirectionalLight {\r\n    color?: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFPointLight {\r\n    color?: number[];\r\n    constantAttenuation?: number;\r\n    linearAttenuation?: number;\r\n    quadraticAttenuation?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSpotLight {\r\n    color?: number[];\r\n    constantAttenuation?: number;\r\n    fallOfAngle?: number;\r\n    fallOffExponent?: number;\r\n    linearAttenuation?: number;\r\n    quadraticAttenuation?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFLight extends IGLTFChildRootProperty {\r\n    type: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCameraOrthographic {\r\n    xmag: number;\r\n    ymag: number;\r\n    zfar: number;\r\n    znear: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCameraPerspective {\r\n    aspectRatio: number;\r\n    yfov: number;\r\n    zfar: number;\r\n    znear: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCamera extends IGLTFChildRootProperty {\r\n    type: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationChannelTarget {\r\n    id: string;\r\n    path: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationChannel {\r\n    sampler: string;\r\n    target: IGLTFAnimationChannelTarget;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationSampler {\r\n    input: string;\r\n    output: string;\r\n\r\n    interpolation?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimation extends IGLTFChildRootProperty {\r\n    channels?: IGLTFAnimationChannel[];\r\n    parameters?: { [key: string]: string };\r\n    samplers?: { [key: string]: IGLTFAnimationSampler };\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFNodeInstanceSkin {\r\n    skeletons: string[];\r\n    skin: string;\r\n    meshes: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSkins extends IGLTFChildRootProperty {\r\n    bindShapeMatrix: number[];\r\n    inverseBindMatrices: string;\r\n    jointNames: string[];\r\n\r\n    babylonSkeleton?: Skeleton;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFNode extends IGLTFChildRootProperty {\r\n    camera?: string;\r\n    children: string[];\r\n    skin?: string;\r\n    jointName?: string;\r\n    light?: string;\r\n    matrix: number[];\r\n    mesh?: string;\r\n    meshes?: string[];\r\n    rotation?: number[];\r\n    scale?: number[];\r\n    translation?: number[];\r\n\r\n    // Babylon.js values (optimize)\r\n    babylonNode?: Node;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFScene extends IGLTFChildRootProperty {\r\n    nodes: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFRuntime {\r\n    extensions: { [key: string]: any };\r\n    accessors: { [key: string]: IGLTFAccessor };\r\n    buffers: { [key: string]: IGLTFBuffer };\r\n    bufferViews: { [key: string]: IGLTFBufferView };\r\n    meshes: { [key: string]: IGLTFMesh };\r\n    lights: { [key: string]: IGLTFLight };\r\n    cameras: { [key: string]: IGLTFCamera };\r\n    nodes: { [key: string]: IGLTFNode };\r\n    images: { [key: string]: IGLTFImage };\r\n    textures: { [key: string]: IGLTFTexture };\r\n    shaders: { [key: string]: IGLTFShader };\r\n    programs: { [key: string]: IGLTFProgram };\r\n    samplers: { [key: string]: IGLTFSampler };\r\n    techniques: { [key: string]: IGLTFTechnique };\r\n    materials: { [key: string]: IGLTFMaterial };\r\n    animations: { [key: string]: IGLTFAnimation };\r\n    skins: { [key: string]: IGLTFSkins };\r\n\r\n    currentScene?: Object;\r\n    scenes: { [key: string]: IGLTFScene }; // v1.1\r\n\r\n    extensionsUsed: string[];\r\n    extensionsRequired?: string[]; // v1.1\r\n\r\n    buffersCount: number;\r\n    shaderscount: number;\r\n\r\n    scene: Scene;\r\n    rootUrl: string;\r\n\r\n    loadedBufferCount: number;\r\n    loadedBufferViews: { [name: string]: ArrayBufferView };\r\n\r\n    loadedShaderCount: number;\r\n\r\n    importOnlyMeshes: boolean;\r\n    importMeshesNames?: string[];\r\n\r\n    dummyNodes: Node[];\r\n\r\n    assetContainer: Nullable<AssetContainer>;\r\n}\r\n\r\n/** @internal */\r\nexport interface INodeToRoot {\r\n    bone: Bone;\r\n    node: IGLTFNode;\r\n    id: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IJointNode {\r\n    node: IGLTFNode;\r\n    id: string;\r\n}\r\n","import type { IGLTFTechniqueParameter, IGLTFAccessor, IGLTFRuntime, IGLTFBufferView } from \"./glTFLoaderInterfaces\";\r\nimport { EParameterType, ETextureWrapMode, ETextureFilterType, EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector2, Vector3, Vector4, Matrix } from \"core/Maths/math.vector\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Effect } from \"core/Materials/effect\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * Utils functions for GLTF\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFUtils {\r\n    /**\r\n     * Sets the given \"parameter\" matrix\r\n     * @param scene the Scene object\r\n     * @param source the source node where to pick the matrix\r\n     * @param parameter the GLTF technique parameter\r\n     * @param uniformName the name of the shader's uniform\r\n     * @param shaderMaterial the shader material\r\n     */\r\n    public static SetMatrix(scene: Scene, source: Node, parameter: IGLTFTechniqueParameter, uniformName: string, shaderMaterial: ShaderMaterial | Effect): void {\r\n        let mat: Nullable<Matrix> = null;\r\n\r\n        if (parameter.semantic === \"MODEL\") {\r\n            mat = source.getWorldMatrix();\r\n        } else if (parameter.semantic === \"PROJECTION\") {\r\n            mat = scene.getProjectionMatrix();\r\n        } else if (parameter.semantic === \"VIEW\") {\r\n            mat = scene.getViewMatrix();\r\n        } else if (parameter.semantic === \"MODELVIEWINVERSETRANSPOSE\") {\r\n            mat = Matrix.Transpose(source.getWorldMatrix().multiply(scene.getViewMatrix()).invert());\r\n        } else if (parameter.semantic === \"MODELVIEW\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getViewMatrix());\r\n        } else if (parameter.semantic === \"MODELVIEWPROJECTION\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getTransformMatrix());\r\n        } else if (parameter.semantic === \"MODELINVERSE\") {\r\n            mat = source.getWorldMatrix().invert();\r\n        } else if (parameter.semantic === \"VIEWINVERSE\") {\r\n            mat = scene.getViewMatrix().invert();\r\n        } else if (parameter.semantic === \"PROJECTIONINVERSE\") {\r\n            mat = scene.getProjectionMatrix().invert();\r\n        } else if (parameter.semantic === \"MODELVIEWINVERSE\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getViewMatrix()).invert();\r\n        } else if (parameter.semantic === \"MODELVIEWPROJECTIONINVERSE\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getTransformMatrix()).invert();\r\n        } else if (parameter.semantic === \"MODELINVERSETRANSPOSE\") {\r\n            mat = Matrix.Transpose(source.getWorldMatrix().invert());\r\n        }\r\n\r\n        if (mat) {\r\n            switch (parameter.type) {\r\n                case EParameterType.FLOAT_MAT2:\r\n                    shaderMaterial.setMatrix2x2(uniformName, Matrix.GetAsMatrix2x2(mat));\r\n                    break;\r\n                case EParameterType.FLOAT_MAT3:\r\n                    shaderMaterial.setMatrix3x3(uniformName, Matrix.GetAsMatrix3x3(mat));\r\n                    break;\r\n                case EParameterType.FLOAT_MAT4:\r\n                    shaderMaterial.setMatrix(uniformName, mat);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the given \"parameter\" matrix\r\n     * @param shaderMaterial the shader material\r\n     * @param uniform the name of the shader's uniform\r\n     * @param value the value of the uniform\r\n     * @param type the uniform's type (EParameterType FLOAT, VEC2, VEC3 or VEC4)\r\n     * @returns true if set, else false\r\n     */\r\n    public static SetUniform(shaderMaterial: ShaderMaterial | Effect, uniform: string, value: any, type: number): boolean {\r\n        switch (type) {\r\n            case EParameterType.FLOAT:\r\n                shaderMaterial.setFloat(uniform, value);\r\n                return true;\r\n            case EParameterType.FLOAT_VEC2:\r\n                shaderMaterial.setVector2(uniform, Vector2.FromArray(value));\r\n                return true;\r\n            case EParameterType.FLOAT_VEC3:\r\n                shaderMaterial.setVector3(uniform, Vector3.FromArray(value));\r\n                return true;\r\n            case EParameterType.FLOAT_VEC4:\r\n                shaderMaterial.setVector4(uniform, Vector4.FromArray(value));\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the wrap mode of the texture\r\n     * @param mode the mode value\r\n     * @returns the wrap mode (TEXTURE_WRAP_ADDRESSMODE, MIRROR_ADDRESSMODE or CLAMP_ADDRESSMODE)\r\n     */\r\n    public static GetWrapMode(mode: number): number {\r\n        switch (mode) {\r\n            case ETextureWrapMode.CLAMP_TO_EDGE:\r\n                return Texture.CLAMP_ADDRESSMODE;\r\n            case ETextureWrapMode.MIRRORED_REPEAT:\r\n                return Texture.MIRROR_ADDRESSMODE;\r\n            case ETextureWrapMode.REPEAT:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n            default:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the byte stride giving an accessor\r\n     * @param accessor the GLTF accessor objet\r\n     * @returns the byte stride\r\n     */\r\n    public static GetByteStrideFromType(accessor: IGLTFAccessor): number {\r\n        // Needs this function since \"byteStride\" isn't requiered in glTF format\r\n        const type = accessor.type;\r\n\r\n        switch (type) {\r\n            case \"VEC2\":\r\n                return 2;\r\n            case \"VEC3\":\r\n                return 3;\r\n            case \"VEC4\":\r\n                return 4;\r\n            case \"MAT2\":\r\n                return 4;\r\n            case \"MAT3\":\r\n                return 9;\r\n            case \"MAT4\":\r\n                return 16;\r\n            default:\r\n                return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the texture filter mode giving a mode value\r\n     * @param mode the filter mode value\r\n     * @returns the filter mode (TODO - needs to be a type?)\r\n     */\r\n    public static GetTextureFilterMode(mode: number): number {\r\n        switch (mode) {\r\n            case ETextureFilterType.LINEAR:\r\n            case ETextureFilterType.LINEAR_MIPMAP_NEAREST:\r\n            case ETextureFilterType.LINEAR_MIPMAP_LINEAR:\r\n                return Texture.TRILINEAR_SAMPLINGMODE;\r\n            case ETextureFilterType.NEAREST:\r\n            case ETextureFilterType.NEAREST_MIPMAP_NEAREST:\r\n                return Texture.NEAREST_SAMPLINGMODE;\r\n            default:\r\n                return Texture.BILINEAR_SAMPLINGMODE;\r\n        }\r\n    }\r\n\r\n    public static GetBufferFromBufferView(\r\n        gltfRuntime: IGLTFRuntime,\r\n        bufferView: IGLTFBufferView,\r\n        byteOffset: number,\r\n        byteLength: number,\r\n        componentType: EComponentType\r\n    ): ArrayBufferView {\r\n        byteOffset = bufferView.byteOffset + byteOffset;\r\n\r\n        const loadedBufferView = gltfRuntime.loadedBufferViews[bufferView.buffer];\r\n        if (byteOffset + byteLength > loadedBufferView.byteLength) {\r\n            throw new Error(\"Buffer access is out of range\");\r\n        }\r\n\r\n        const buffer = loadedBufferView.buffer;\r\n        byteOffset += loadedBufferView.byteOffset;\r\n\r\n        switch (componentType) {\r\n            case EComponentType.BYTE:\r\n                return new Int8Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.UNSIGNED_BYTE:\r\n                return new Uint8Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.SHORT:\r\n                return new Int16Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.UNSIGNED_SHORT:\r\n                return new Uint16Array(buffer, byteOffset, byteLength);\r\n            default:\r\n                return new Float32Array(buffer, byteOffset, byteLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a buffer from its accessor\r\n     * @param gltfRuntime the GLTF runtime\r\n     * @param accessor the GLTF accessor\r\n     * @returns an array buffer view\r\n     */\r\n    public static GetBufferFromAccessor(gltfRuntime: IGLTFRuntime, accessor: IGLTFAccessor): any {\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[accessor.bufferView];\r\n        const byteLength = accessor.count * GLTFUtils.GetByteStrideFromType(accessor);\r\n        return GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, accessor.byteOffset, byteLength, accessor.componentType);\r\n    }\r\n\r\n    /**\r\n     * Decodes a buffer view into a string\r\n     * @param view the buffer view\r\n     * @returns a string\r\n     */\r\n    public static DecodeBufferToText(view: ArrayBufferView): string {\r\n        let result = \"\";\r\n        const length = view.byteLength;\r\n\r\n        for (let i = 0; i < length; ++i) {\r\n            result += String.fromCharCode((<any>view)[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the default material of gltf. Related to\r\n     * https://github.com/KhronosGroup/glTF/tree/master/specification/1.0#appendix-a-default-material\r\n     * @param scene the Babylon.js scene\r\n     * @returns the default Babylon material\r\n     */\r\n    public static GetDefaultMaterial(scene: Scene): ShaderMaterial {\r\n        if (!GLTFUtils._DefaultMaterial) {\r\n            Effect.ShadersStore[\"GLTFDefaultMaterialVertexShader\"] = [\r\n                \"precision highp float;\",\r\n                \"\",\r\n                \"uniform mat4 worldView;\",\r\n                \"uniform mat4 projection;\",\r\n                \"\",\r\n                \"attribute vec3 position;\",\r\n                \"\",\r\n                \"void main(void)\",\r\n                \"{\",\r\n                \"    gl_Position = projection * worldView * vec4(position, 1.0);\",\r\n                \"}\",\r\n            ].join(\"\\n\");\r\n\r\n            Effect.ShadersStore[\"GLTFDefaultMaterialPixelShader\"] = [\r\n                \"precision highp float;\",\r\n                \"\",\r\n                \"uniform vec4 u_emission;\",\r\n                \"\",\r\n                \"void main(void)\",\r\n                \"{\",\r\n                \"    gl_FragColor = u_emission;\",\r\n                \"}\",\r\n            ].join(\"\\n\");\r\n\r\n            const shaderPath = {\r\n                vertex: \"GLTFDefaultMaterial\",\r\n                fragment: \"GLTFDefaultMaterial\",\r\n            };\r\n\r\n            const options = {\r\n                attributes: [\"position\"],\r\n                uniforms: [\"worldView\", \"projection\", \"u_emission\"],\r\n                samplers: new Array<string>(),\r\n                needAlphaBlending: false,\r\n            };\r\n\r\n            GLTFUtils._DefaultMaterial = new ShaderMaterial(\"GLTFDefaultMaterial\", scene, shaderPath, options);\r\n            GLTFUtils._DefaultMaterial.setColor4(\"u_emission\", new Color4(0.5, 0.5, 0.5, 1.0));\r\n        }\r\n\r\n        return GLTFUtils._DefaultMaterial;\r\n    }\r\n\r\n    // The GLTF default material\r\n    private static _DefaultMaterial: Nullable<ShaderMaterial> = null;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type {\r\n    IGLTFRuntime,\r\n    IGLTFTechniqueParameter,\r\n    IGLTFAnimation,\r\n    IGLTFAnimationSampler,\r\n    IGLTFNode,\r\n    IGLTFSkins,\r\n    INodeToRoot,\r\n    IJointNode,\r\n    IGLTFMesh,\r\n    IGLTFAccessor,\r\n    IGLTFLight,\r\n    IGLTFAmbienLight,\r\n    IGLTFDirectionalLight,\r\n    IGLTFPointLight,\r\n    IGLTFSpotLight,\r\n    IGLTFCamera,\r\n    IGLTFCameraPerspective,\r\n    IGLTFScene,\r\n    IGLTFTechnique,\r\n    IGLTFMaterial,\r\n    IGLTFProgram,\r\n    IGLTFBuffer,\r\n    IGLTFTexture,\r\n    IGLTFImage,\r\n    IGLTFSampler,\r\n    IGLTFShader,\r\n    IGLTFTechniqueStates,\r\n} from \"./glTFLoaderInterfaces\";\r\nimport { EParameterType, ETextureFilterType, ECullingType, EBlendingFunction, EShaderType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { FloatArray, Nullable } from \"core/types\";\r\nimport { Quaternion, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { FreeCamera } from \"core/Cameras/freeCamera\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { Bone } from \"core/Bones/bone\";\r\nimport { Skeleton } from \"core/Bones/skeleton\";\r\nimport { Effect } from \"core/Materials/effect\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { MultiMaterial } from \"core/Materials/multiMaterial\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { SubMesh } from \"core/Meshes/subMesh\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { PointLight } from \"core/Lights/pointLight\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\nimport type { ISceneLoaderAsyncResult, ISceneLoaderProgressEvent } from \"core/Loading/sceneLoader\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport type { IGLTFLoader, IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport { GLTFFileLoader } from \"../glTFFileLoader\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\n\r\n/**\r\n * Tokenizer. Used for shaders compatibility\r\n * Automatically map world, view, projection, worldViewProjection, attributes and so on\r\n */\r\nenum ETokenType {\r\n    IDENTIFIER = 1,\r\n\r\n    UNKNOWN = 2,\r\n    END_OF_INPUT = 3,\r\n}\r\n\r\nclass Tokenizer {\r\n    private _toParse: string;\r\n    private _pos: number = 0;\r\n    private _maxPos: number;\r\n\r\n    public currentToken: ETokenType = ETokenType.UNKNOWN;\r\n    public currentIdentifier: string = \"\";\r\n    public currentString: string = \"\";\r\n    public isLetterOrDigitPattern: RegExp = /^[a-zA-Z0-9]+$/;\r\n\r\n    constructor(toParse: string) {\r\n        this._toParse = toParse;\r\n        this._maxPos = toParse.length;\r\n    }\r\n\r\n    public getNextToken(): ETokenType {\r\n        if (this.isEnd()) {\r\n            return ETokenType.END_OF_INPUT;\r\n        }\r\n\r\n        this.currentString = this.read();\r\n        this.currentToken = ETokenType.UNKNOWN;\r\n\r\n        if (this.currentString === \"_\" || this.isLetterOrDigitPattern.test(this.currentString)) {\r\n            this.currentToken = ETokenType.IDENTIFIER;\r\n            this.currentIdentifier = this.currentString;\r\n            while (!this.isEnd() && (this.isLetterOrDigitPattern.test((this.currentString = this.peek())) || this.currentString === \"_\")) {\r\n                this.currentIdentifier += this.currentString;\r\n                this.forward();\r\n            }\r\n        }\r\n\r\n        return this.currentToken;\r\n    }\r\n\r\n    public peek(): string {\r\n        return this._toParse[this._pos];\r\n    }\r\n\r\n    public read(): string {\r\n        return this._toParse[this._pos++];\r\n    }\r\n\r\n    public forward(): void {\r\n        this._pos++;\r\n    }\r\n\r\n    public isEnd(): boolean {\r\n        return this._pos >= this._maxPos;\r\n    }\r\n}\r\n\r\n/**\r\n * Values\r\n */\r\nconst glTFTransforms = [\"MODEL\", \"VIEW\", \"PROJECTION\", \"MODELVIEW\", \"MODELVIEWPROJECTION\", \"JOINTMATRIX\"];\r\nconst babylonTransforms = [\"world\", \"view\", \"projection\", \"worldView\", \"worldViewProjection\", \"mBones\"];\r\n\r\nconst glTFAnimationPaths = [\"translation\", \"rotation\", \"scale\"];\r\nconst babylonAnimationPaths = [\"position\", \"rotationQuaternion\", \"scaling\"];\r\n\r\n/**\r\n * Parse\r\n * @param parsedBuffers\r\n * @param gltfRuntime\r\n */\r\nconst parseBuffers = (parsedBuffers: any, gltfRuntime: IGLTFRuntime) => {\r\n    for (const buf in parsedBuffers) {\r\n        const parsedBuffer = parsedBuffers[buf];\r\n        gltfRuntime.buffers[buf] = parsedBuffer;\r\n        gltfRuntime.buffersCount++;\r\n    }\r\n};\r\n\r\nconst parseShaders = (parsedShaders: any, gltfRuntime: IGLTFRuntime) => {\r\n    for (const sha in parsedShaders) {\r\n        const parsedShader = parsedShaders[sha];\r\n        gltfRuntime.shaders[sha] = parsedShader;\r\n        gltfRuntime.shaderscount++;\r\n    }\r\n};\r\n\r\nconst parseObject = (parsedObjects: any, runtimeProperty: string, gltfRuntime: IGLTFRuntime) => {\r\n    for (const object in parsedObjects) {\r\n        const parsedObject = parsedObjects[object];\r\n        (<any>gltfRuntime)[runtimeProperty][object] = parsedObject;\r\n    }\r\n};\r\n\r\n/**\r\n * Utils\r\n * @param buffer\r\n */\r\nconst normalizeUVs = (buffer: any) => {\r\n    if (!buffer) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < buffer.length / 2; i++) {\r\n        buffer[i * 2 + 1] = 1.0 - buffer[i * 2 + 1];\r\n    }\r\n};\r\n\r\nconst getAttribute = (attributeParameter: IGLTFTechniqueParameter): Nullable<string> => {\r\n    if (attributeParameter.semantic === \"NORMAL\") {\r\n        return \"normal\";\r\n    } else if (attributeParameter.semantic === \"POSITION\") {\r\n        return \"position\";\r\n    } else if (attributeParameter.semantic === \"JOINT\") {\r\n        return \"matricesIndices\";\r\n    } else if (attributeParameter.semantic === \"WEIGHT\") {\r\n        return \"matricesWeights\";\r\n    } else if (attributeParameter.semantic === \"COLOR\") {\r\n        return \"color\";\r\n    } else if (attributeParameter.semantic && attributeParameter.semantic.indexOf(\"TEXCOORD_\") !== -1) {\r\n        const channel = Number(attributeParameter.semantic.split(\"_\")[1]);\r\n        return \"uv\" + (channel === 0 ? \"\" : channel + 1);\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Loads and creates animations\r\n * @param gltfRuntime\r\n */\r\nconst loadAnimations = (gltfRuntime: IGLTFRuntime) => {\r\n    for (const anim in gltfRuntime.animations) {\r\n        const animation: IGLTFAnimation = gltfRuntime.animations[anim];\r\n\r\n        if (!animation.channels || !animation.samplers) {\r\n            continue;\r\n        }\r\n\r\n        let lastAnimation: Nullable<Animation> = null;\r\n\r\n        for (let i = 0; i < animation.channels.length; i++) {\r\n            // Get parameters and load buffers\r\n            const channel = animation.channels[i];\r\n            const sampler: IGLTFAnimationSampler = animation.samplers[channel.sampler];\r\n\r\n            if (!sampler) {\r\n                continue;\r\n            }\r\n\r\n            let inputData: Nullable<string> = null;\r\n            let outputData: Nullable<string> = null;\r\n\r\n            if (animation.parameters) {\r\n                inputData = animation.parameters[sampler.input];\r\n                outputData = animation.parameters[sampler.output];\r\n            } else {\r\n                inputData = sampler.input;\r\n                outputData = sampler.output;\r\n            }\r\n\r\n            const bufferInput = GLTFUtils.GetBufferFromAccessor(gltfRuntime, gltfRuntime.accessors[inputData]);\r\n            const bufferOutput = GLTFUtils.GetBufferFromAccessor(gltfRuntime, gltfRuntime.accessors[outputData]);\r\n\r\n            const targetId = channel.target.id;\r\n            let targetNode: any = gltfRuntime.scene.getNodeById(targetId);\r\n\r\n            if (targetNode === null) {\r\n                targetNode = gltfRuntime.scene.getNodeByName(targetId);\r\n            }\r\n\r\n            if (targetNode === null) {\r\n                Tools.Warn(\"Creating animation named \" + anim + \". But cannot find node named \" + targetId + \" to attach to\");\r\n                continue;\r\n            }\r\n\r\n            const isBone = targetNode instanceof Bone;\r\n\r\n            // Get target path (position, rotation or scaling)\r\n            let targetPath = channel.target.path;\r\n            const targetPathIndex = glTFAnimationPaths.indexOf(targetPath);\r\n\r\n            if (targetPathIndex !== -1) {\r\n                targetPath = babylonAnimationPaths[targetPathIndex];\r\n            }\r\n\r\n            // Determine animation type\r\n            let animationType = Animation.ANIMATIONTYPE_MATRIX;\r\n\r\n            if (!isBone) {\r\n                if (targetPath === \"rotationQuaternion\") {\r\n                    animationType = Animation.ANIMATIONTYPE_QUATERNION;\r\n                    targetNode.rotationQuaternion = new Quaternion();\r\n                } else {\r\n                    animationType = Animation.ANIMATIONTYPE_VECTOR3;\r\n                }\r\n            }\r\n\r\n            // Create animation and key frames\r\n            let babylonAnimation: Nullable<Animation> = null;\r\n            const keys = [];\r\n            let arrayOffset = 0;\r\n            let modifyKey = false;\r\n\r\n            if (isBone && lastAnimation && lastAnimation.getKeys().length === bufferInput.length) {\r\n                babylonAnimation = lastAnimation;\r\n                modifyKey = true;\r\n            }\r\n\r\n            if (!modifyKey) {\r\n                gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n                babylonAnimation = new Animation(anim, isBone ? \"_matrix\" : targetPath, 1, animationType, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n                gltfRuntime.scene._blockEntityCollection = false;\r\n            }\r\n\r\n            // For each frame\r\n            for (let j = 0; j < bufferInput.length; j++) {\r\n                let value: any = null;\r\n\r\n                if (targetPath === \"rotationQuaternion\") {\r\n                    // VEC4\r\n                    value = Quaternion.FromArray([bufferOutput[arrayOffset], bufferOutput[arrayOffset + 1], bufferOutput[arrayOffset + 2], bufferOutput[arrayOffset + 3]]);\r\n                    arrayOffset += 4;\r\n                } else {\r\n                    // Position and scaling are VEC3\r\n                    value = Vector3.FromArray([bufferOutput[arrayOffset], bufferOutput[arrayOffset + 1], bufferOutput[arrayOffset + 2]]);\r\n                    arrayOffset += 3;\r\n                }\r\n\r\n                if (isBone) {\r\n                    const bone = <Bone>targetNode;\r\n                    let translation = Vector3.Zero();\r\n                    let rotationQuaternion = new Quaternion();\r\n                    let scaling = Vector3.Zero();\r\n\r\n                    // Warning on decompose\r\n                    let mat = bone.getBaseMatrix();\r\n\r\n                    if (modifyKey && lastAnimation) {\r\n                        mat = lastAnimation.getKeys()[j].value;\r\n                    }\r\n\r\n                    mat.decompose(scaling, rotationQuaternion, translation);\r\n\r\n                    if (targetPath === \"position\") {\r\n                        translation = value;\r\n                    } else if (targetPath === \"rotationQuaternion\") {\r\n                        rotationQuaternion = value;\r\n                    } else {\r\n                        scaling = value;\r\n                    }\r\n\r\n                    value = Matrix.Compose(scaling, rotationQuaternion, translation);\r\n                }\r\n\r\n                if (!modifyKey) {\r\n                    keys.push({\r\n                        frame: bufferInput[j],\r\n                        value: value,\r\n                    });\r\n                } else if (lastAnimation) {\r\n                    lastAnimation.getKeys()[j].value = value;\r\n                }\r\n            }\r\n\r\n            // Finish\r\n            if (!modifyKey && babylonAnimation) {\r\n                babylonAnimation.setKeys(keys);\r\n                targetNode.animations.push(babylonAnimation);\r\n            }\r\n\r\n            lastAnimation = babylonAnimation;\r\n\r\n            gltfRuntime.scene.stopAnimation(targetNode);\r\n            gltfRuntime.scene.beginAnimation(targetNode, 0, bufferInput[bufferInput.length - 1], true, 1.0);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @returns the bones transformation matrix\r\n * @param node\r\n */\r\nconst configureBoneTransformation = (node: IGLTFNode): Matrix => {\r\n    let mat: Nullable<Matrix> = null;\r\n\r\n    if (node.translation || node.rotation || node.scale) {\r\n        const scale = Vector3.FromArray(node.scale || [1, 1, 1]);\r\n        const rotation = Quaternion.FromArray(node.rotation || [0, 0, 0, 1]);\r\n        const position = Vector3.FromArray(node.translation || [0, 0, 0]);\r\n\r\n        mat = Matrix.Compose(scale, rotation, position);\r\n    } else {\r\n        mat = Matrix.FromArray(node.matrix);\r\n    }\r\n\r\n    return mat;\r\n};\r\n\r\n/**\r\n * Returns the parent bone\r\n * @param gltfRuntime\r\n * @param skins\r\n * @param jointName\r\n * @param newSkeleton\r\n * @returns the parent bone\r\n */\r\nconst getParentBone = (gltfRuntime: IGLTFRuntime, skins: IGLTFSkins, jointName: string, newSkeleton: Skeleton): Nullable<Bone> => {\r\n    // Try to find\r\n    for (let i = 0; i < newSkeleton.bones.length; i++) {\r\n        if (newSkeleton.bones[i].name === jointName) {\r\n            return newSkeleton.bones[i];\r\n        }\r\n    }\r\n\r\n    // Not found, search in gltf nodes\r\n    const nodes = gltfRuntime.nodes;\r\n    for (const nde in nodes) {\r\n        const node: IGLTFNode = nodes[nde];\r\n\r\n        if (!node.jointName) {\r\n            continue;\r\n        }\r\n\r\n        const children = node.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const child: IGLTFNode = gltfRuntime.nodes[children[i]];\r\n            if (!child.jointName) {\r\n                continue;\r\n            }\r\n\r\n            if (child.jointName === jointName) {\r\n                const mat = configureBoneTransformation(node);\r\n                const bone = new Bone(node.name || \"\", newSkeleton, getParentBone(gltfRuntime, skins, node.jointName, newSkeleton), mat);\r\n                bone.id = nde;\r\n                return bone;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the appropriate root node\r\n * @param nodesToRoot\r\n * @param id\r\n * @returns the root node\r\n */\r\nconst getNodeToRoot = (nodesToRoot: INodeToRoot[], id: string): Nullable<Bone> => {\r\n    for (let i = 0; i < nodesToRoot.length; i++) {\r\n        const nodeToRoot = nodesToRoot[i];\r\n\r\n        for (let j = 0; j < nodeToRoot.node.children.length; j++) {\r\n            const child = nodeToRoot.node.children[j];\r\n            if (child === id) {\r\n                return nodeToRoot.bone;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the node with the joint name\r\n * @param gltfRuntime\r\n * @param jointName\r\n * @returns the node with the joint name\r\n */\r\nconst getJointNode = (gltfRuntime: IGLTFRuntime, jointName: string): Nullable<IJointNode> => {\r\n    const nodes = gltfRuntime.nodes;\r\n    let node: IGLTFNode = nodes[jointName];\r\n    if (node) {\r\n        return {\r\n            node: node,\r\n            id: jointName,\r\n        };\r\n    }\r\n\r\n    for (const nde in nodes) {\r\n        node = nodes[nde];\r\n        if (node.jointName === jointName) {\r\n            return {\r\n                node: node,\r\n                id: nde,\r\n            };\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Checks if a nodes is in joints\r\n * @param skins\r\n * @param id\r\n * @returns true if the node is in joints, else false\r\n */\r\nconst nodeIsInJoints = (skins: IGLTFSkins, id: string): boolean => {\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        if (skins.jointNames[i] === id) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Fills the nodes to root for bones and builds hierarchy\r\n * @param gltfRuntime\r\n * @param newSkeleton\r\n * @param skins\r\n * @param nodesToRoot\r\n */\r\nconst getNodesToRoot = (gltfRuntime: IGLTFRuntime, newSkeleton: Skeleton, skins: IGLTFSkins, nodesToRoot: INodeToRoot[]) => {\r\n    // Creates nodes for root\r\n    for (const nde in gltfRuntime.nodes) {\r\n        const node: IGLTFNode = gltfRuntime.nodes[nde];\r\n        const id = nde;\r\n\r\n        if (!node.jointName || nodeIsInJoints(skins, node.jointName)) {\r\n            continue;\r\n        }\r\n\r\n        // Create node to root bone\r\n        const mat = configureBoneTransformation(node);\r\n        const bone = new Bone(node.name || \"\", newSkeleton, null, mat);\r\n        bone.id = id;\r\n        nodesToRoot.push({ bone: bone, node: node, id: id });\r\n    }\r\n\r\n    // Parenting\r\n    for (let i = 0; i < nodesToRoot.length; i++) {\r\n        const nodeToRoot = nodesToRoot[i];\r\n        const children = nodeToRoot.node.children;\r\n\r\n        for (let j = 0; j < children.length; j++) {\r\n            let child: Nullable<INodeToRoot> = null;\r\n\r\n            for (let k = 0; k < nodesToRoot.length; k++) {\r\n                if (nodesToRoot[k].id === children[j]) {\r\n                    child = nodesToRoot[k];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (child) {\r\n                (<any>child.bone)._parent = nodeToRoot.bone;\r\n                nodeToRoot.bone.children.push(child.bone);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Imports a skeleton\r\n * @param gltfRuntime\r\n * @param skins\r\n * @param mesh\r\n * @param newSkeleton\r\n * @returns the bone name\r\n */\r\nconst importSkeleton = (gltfRuntime: IGLTFRuntime, skins: IGLTFSkins, mesh: Mesh, newSkeleton: Skeleton | undefined): Skeleton => {\r\n    if (!newSkeleton) {\r\n        newSkeleton = new Skeleton(skins.name || \"\", \"\", gltfRuntime.scene);\r\n    }\r\n\r\n    if (!skins.babylonSkeleton) {\r\n        return newSkeleton;\r\n    }\r\n\r\n    // Find the root bones\r\n    const nodesToRoot: INodeToRoot[] = [];\r\n    const nodesToRootToAdd: Bone[] = [];\r\n\r\n    getNodesToRoot(gltfRuntime, newSkeleton, skins, nodesToRoot);\r\n    newSkeleton.bones = [];\r\n\r\n    // Joints\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        const jointNode = getJointNode(gltfRuntime, skins.jointNames[i]);\r\n\r\n        if (!jointNode) {\r\n            continue;\r\n        }\r\n\r\n        const node = jointNode.node;\r\n\r\n        if (!node) {\r\n            Tools.Warn(\"Joint named \" + skins.jointNames[i] + \" does not exist\");\r\n            continue;\r\n        }\r\n\r\n        const id = jointNode.id;\r\n\r\n        // Optimize, if the bone already exists...\r\n        const existingBone = gltfRuntime.scene.getBoneById(id);\r\n        if (existingBone) {\r\n            newSkeleton.bones.push(existingBone);\r\n            continue;\r\n        }\r\n\r\n        // Search for parent bone\r\n        let foundBone = false;\r\n        let parentBone: Nullable<Bone> = null;\r\n\r\n        for (let j = 0; j < i; j++) {\r\n            const jointNode = getJointNode(gltfRuntime, skins.jointNames[j]);\r\n\r\n            if (!jointNode) {\r\n                continue;\r\n            }\r\n\r\n            const joint: IGLTFNode = jointNode.node;\r\n\r\n            if (!joint) {\r\n                Tools.Warn(\"Joint named \" + skins.jointNames[j] + \" does not exist when looking for parent\");\r\n                continue;\r\n            }\r\n\r\n            const children = joint.children;\r\n            if (!children) {\r\n                continue;\r\n            }\r\n            foundBone = false;\r\n\r\n            for (let k = 0; k < children.length; k++) {\r\n                if (children[k] === id) {\r\n                    parentBone = getParentBone(gltfRuntime, skins, skins.jointNames[j], newSkeleton);\r\n                    foundBone = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundBone) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Create bone\r\n        const mat = configureBoneTransformation(node);\r\n\r\n        if (!parentBone && nodesToRoot.length > 0) {\r\n            parentBone = getNodeToRoot(nodesToRoot, id);\r\n\r\n            if (parentBone) {\r\n                if (nodesToRootToAdd.indexOf(parentBone) === -1) {\r\n                    nodesToRootToAdd.push(parentBone);\r\n                }\r\n            }\r\n        }\r\n\r\n        const bone = new Bone(node.jointName || \"\", newSkeleton, parentBone, mat);\r\n        bone.id = id;\r\n    }\r\n\r\n    // Polish\r\n    const bones = newSkeleton.bones;\r\n    newSkeleton.bones = [];\r\n\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        const jointNode = getJointNode(gltfRuntime, skins.jointNames[i]);\r\n\r\n        if (!jointNode) {\r\n            continue;\r\n        }\r\n\r\n        for (let j = 0; j < bones.length; j++) {\r\n            if (bones[j].id === jointNode.id) {\r\n                newSkeleton.bones.push(bones[j]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    newSkeleton.prepare();\r\n\r\n    // Finish\r\n    for (let i = 0; i < nodesToRootToAdd.length; i++) {\r\n        newSkeleton.bones.push(nodesToRootToAdd[i]);\r\n    }\r\n\r\n    return newSkeleton;\r\n};\r\n\r\n/**\r\n * Imports a mesh and its geometries\r\n * @param gltfRuntime\r\n * @param node\r\n * @param meshes\r\n * @param id\r\n * @param newMesh\r\n * @returns the new mesh\r\n */\r\nconst importMesh = (gltfRuntime: IGLTFRuntime, node: IGLTFNode, meshes: string[], id: string, newMesh: Mesh): Mesh => {\r\n    if (!newMesh) {\r\n        gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n        newMesh = new Mesh(node.name || \"\", gltfRuntime.scene);\r\n        newMesh._parentContainer = gltfRuntime.assetContainer;\r\n        gltfRuntime.scene._blockEntityCollection = false;\r\n        newMesh.id = id;\r\n    }\r\n\r\n    if (!node.babylonNode) {\r\n        return newMesh;\r\n    }\r\n\r\n    const subMaterials: Material[] = [];\r\n\r\n    let vertexData: Nullable<VertexData> = null;\r\n    const verticesStarts: number[] = [];\r\n    const verticesCounts: number[] = [];\r\n    const indexStarts: number[] = [];\r\n    const indexCounts: number[] = [];\r\n\r\n    for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n        const meshId = meshes[meshIndex];\r\n        const mesh: IGLTFMesh = gltfRuntime.meshes[meshId];\r\n\r\n        if (!mesh) {\r\n            continue;\r\n        }\r\n\r\n        // Positions, normals and UVs\r\n        for (let i = 0; i < mesh.primitives.length; i++) {\r\n            // Temporary vertex data\r\n            const tempVertexData = new VertexData();\r\n\r\n            const primitive = mesh.primitives[i];\r\n            if (primitive.mode !== 4) {\r\n                // continue;\r\n            }\r\n\r\n            const attributes = primitive.attributes;\r\n            let accessor: Nullable<IGLTFAccessor> = null;\r\n            let buffer: any = null;\r\n\r\n            // Set positions, normal and uvs\r\n            for (const semantic in attributes) {\r\n                // Link accessor and buffer view\r\n                accessor = gltfRuntime.accessors[attributes[semantic]];\r\n                buffer = GLTFUtils.GetBufferFromAccessor(gltfRuntime, accessor);\r\n\r\n                if (semantic === \"NORMAL\") {\r\n                    tempVertexData.normals = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.normals).set(buffer);\r\n                } else if (semantic === \"POSITION\") {\r\n                    if (GLTFFileLoader.HomogeneousCoordinates) {\r\n                        tempVertexData.positions = new Float32Array(buffer.length - buffer.length / 4);\r\n\r\n                        for (let j = 0; j < buffer.length; j += 4) {\r\n                            tempVertexData.positions[j] = buffer[j];\r\n                            tempVertexData.positions[j + 1] = buffer[j + 1];\r\n                            tempVertexData.positions[j + 2] = buffer[j + 2];\r\n                        }\r\n                    } else {\r\n                        tempVertexData.positions = new Float32Array(buffer.length);\r\n                        (<Float32Array>tempVertexData.positions).set(buffer);\r\n                    }\r\n\r\n                    verticesCounts.push(tempVertexData.positions.length);\r\n                } else if (semantic.indexOf(\"TEXCOORD_\") !== -1) {\r\n                    const channel = Number(semantic.split(\"_\")[1]);\r\n                    const uvKind = VertexBuffer.UVKind + (channel === 0 ? \"\" : channel + 1);\r\n                    const uvs = new Float32Array(buffer.length);\r\n                    (<Float32Array>uvs).set(buffer);\r\n                    normalizeUVs(uvs);\r\n                    tempVertexData.set(uvs, uvKind);\r\n                } else if (semantic === \"JOINT\") {\r\n                    tempVertexData.matricesIndices = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.matricesIndices).set(buffer);\r\n                } else if (semantic === \"WEIGHT\") {\r\n                    tempVertexData.matricesWeights = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.matricesWeights).set(buffer);\r\n                } else if (semantic === \"COLOR\") {\r\n                    tempVertexData.colors = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.colors).set(buffer);\r\n                }\r\n            }\r\n\r\n            // Indices\r\n            accessor = gltfRuntime.accessors[primitive.indices];\r\n            if (accessor) {\r\n                buffer = GLTFUtils.GetBufferFromAccessor(gltfRuntime, accessor);\r\n\r\n                tempVertexData.indices = new Int32Array(buffer.length);\r\n                tempVertexData.indices.set(buffer);\r\n                indexCounts.push(tempVertexData.indices.length);\r\n            } else {\r\n                // Set indices on the fly\r\n                const indices: number[] = [];\r\n                for (let j = 0; j < (<FloatArray>tempVertexData.positions).length / 3; j++) {\r\n                    indices.push(j);\r\n                }\r\n\r\n                tempVertexData.indices = new Int32Array(indices);\r\n                indexCounts.push(tempVertexData.indices.length);\r\n            }\r\n\r\n            if (!vertexData) {\r\n                vertexData = tempVertexData;\r\n            } else {\r\n                vertexData.merge(tempVertexData);\r\n            }\r\n\r\n            // Sub material\r\n            const material = gltfRuntime.scene.getMaterialById(primitive.material);\r\n\r\n            subMaterials.push(material === null ? GLTFUtils.GetDefaultMaterial(gltfRuntime.scene) : material);\r\n\r\n            // Update vertices start and index start\r\n            verticesStarts.push(verticesStarts.length === 0 ? 0 : verticesStarts[verticesStarts.length - 1] + verticesCounts[verticesCounts.length - 2]);\r\n            indexStarts.push(indexStarts.length === 0 ? 0 : indexStarts[indexStarts.length - 1] + indexCounts[indexCounts.length - 2]);\r\n        }\r\n    }\r\n    let material: StandardMaterial | MultiMaterial;\r\n    gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n    if (subMaterials.length > 1) {\r\n        material = new MultiMaterial(\"multimat\" + id, gltfRuntime.scene);\r\n        (material as MultiMaterial).subMaterials = subMaterials;\r\n    } else {\r\n        material = new StandardMaterial(\"multimat\" + id, gltfRuntime.scene);\r\n    }\r\n\r\n    if (subMaterials.length === 1) {\r\n        material = subMaterials[0] as StandardMaterial;\r\n    }\r\n\r\n    material._parentContainer = gltfRuntime.assetContainer;\r\n\r\n    if (!newMesh.material) {\r\n        newMesh.material = material;\r\n    }\r\n\r\n    // Apply geometry\r\n    new Geometry(id, gltfRuntime.scene, vertexData!, false, newMesh);\r\n    newMesh.computeWorldMatrix(true);\r\n\r\n    gltfRuntime.scene._blockEntityCollection = false;\r\n\r\n    // Apply submeshes\r\n    newMesh.subMeshes = [];\r\n    let index = 0;\r\n    for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n        const meshId = meshes[meshIndex];\r\n        const mesh: IGLTFMesh = gltfRuntime.meshes[meshId];\r\n\r\n        if (!mesh) {\r\n            continue;\r\n        }\r\n\r\n        for (let i = 0; i < mesh.primitives.length; i++) {\r\n            if (mesh.primitives[i].mode !== 4) {\r\n                //continue;\r\n            }\r\n\r\n            SubMesh.AddToMesh(index, verticesStarts[index], verticesCounts[index], indexStarts[index], indexCounts[index], newMesh, newMesh, true);\r\n            index++;\r\n        }\r\n    }\r\n\r\n    // Finish\r\n    return newMesh;\r\n};\r\n\r\n/**\r\n * Configure node transformation from position, rotation and scaling\r\n * @param newNode\r\n * @param position\r\n * @param rotation\r\n * @param scaling\r\n */\r\nconst configureNode = (newNode: any, position: Vector3, rotation: Quaternion, scaling: Vector3) => {\r\n    if (newNode.position) {\r\n        newNode.position = position;\r\n    }\r\n\r\n    if (newNode.rotationQuaternion || newNode.rotation) {\r\n        newNode.rotationQuaternion = rotation;\r\n    }\r\n\r\n    if (newNode.scaling) {\r\n        newNode.scaling = scaling;\r\n    }\r\n};\r\n\r\n/**\r\n * Configures node from transformation matrix\r\n * @param newNode\r\n * @param node\r\n */\r\nconst configureNodeFromMatrix = (newNode: Mesh, node: IGLTFNode) => {\r\n    if (node.matrix) {\r\n        const position = new Vector3(0, 0, 0);\r\n        const rotation = new Quaternion();\r\n        const scaling = new Vector3(0, 0, 0);\r\n        const mat = Matrix.FromArray(node.matrix);\r\n        mat.decompose(scaling, rotation, position);\r\n\r\n        configureNode(newNode, position, rotation, scaling);\r\n    } else if (node.translation && node.rotation && node.scale) {\r\n        configureNode(newNode, Vector3.FromArray(node.translation), Quaternion.FromArray(node.rotation), Vector3.FromArray(node.scale));\r\n    }\r\n\r\n    newNode.computeWorldMatrix(true);\r\n};\r\n\r\n/**\r\n * Imports a node\r\n * @param gltfRuntime\r\n * @param node\r\n * @param id\r\n * @returns the newly imported node\r\n */\r\nconst importNode = (gltfRuntime: IGLTFRuntime, node: IGLTFNode, id: string): Nullable<Node> => {\r\n    let lastNode: Nullable<Node> = null;\r\n\r\n    if (gltfRuntime.importOnlyMeshes && (node.skin || node.meshes)) {\r\n        if (gltfRuntime.importMeshesNames && gltfRuntime.importMeshesNames.length > 0 && gltfRuntime.importMeshesNames.indexOf(node.name || \"\") === -1) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Meshes\r\n    if (node.skin) {\r\n        if (node.meshes) {\r\n            const skin: IGLTFSkins = gltfRuntime.skins[node.skin];\r\n\r\n            const newMesh = importMesh(gltfRuntime, node, node.meshes, id, <Mesh>node.babylonNode);\r\n            newMesh.skeleton = gltfRuntime.scene.getLastSkeletonById(node.skin);\r\n\r\n            if (newMesh.skeleton === null) {\r\n                newMesh.skeleton = importSkeleton(gltfRuntime, skin, newMesh, skin.babylonSkeleton);\r\n\r\n                if (!skin.babylonSkeleton) {\r\n                    skin.babylonSkeleton = newMesh.skeleton;\r\n                }\r\n            }\r\n\r\n            lastNode = newMesh;\r\n        }\r\n    } else if (node.meshes) {\r\n        /**\r\n         * Improve meshes property\r\n         */\r\n        const newMesh = importMesh(gltfRuntime, node, node.mesh ? [node.mesh] : node.meshes, id, <Mesh>node.babylonNode);\r\n        lastNode = newMesh;\r\n    }\r\n    // Lights\r\n    else if (node.light && !node.babylonNode && !gltfRuntime.importOnlyMeshes) {\r\n        const light: IGLTFLight = gltfRuntime.lights[node.light];\r\n\r\n        if (light) {\r\n            if (light.type === \"ambient\") {\r\n                const ambienLight: IGLTFAmbienLight = (<any>light)[light.type];\r\n                const hemiLight = new HemisphericLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                hemiLight.name = node.name || \"\";\r\n\r\n                if (ambienLight.color) {\r\n                    hemiLight.diffuse = Color3.FromArray(ambienLight.color);\r\n                }\r\n\r\n                lastNode = hemiLight;\r\n            } else if (light.type === \"directional\") {\r\n                const directionalLight: IGLTFDirectionalLight = (<any>light)[light.type];\r\n                const dirLight = new DirectionalLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                dirLight.name = node.name || \"\";\r\n\r\n                if (directionalLight.color) {\r\n                    dirLight.diffuse = Color3.FromArray(directionalLight.color);\r\n                }\r\n\r\n                lastNode = dirLight;\r\n            } else if (light.type === \"point\") {\r\n                const pointLight: IGLTFPointLight = (<any>light)[light.type];\r\n                const ptLight = new PointLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                ptLight.name = node.name || \"\";\r\n\r\n                if (pointLight.color) {\r\n                    ptLight.diffuse = Color3.FromArray(pointLight.color);\r\n                }\r\n\r\n                lastNode = ptLight;\r\n            } else if (light.type === \"spot\") {\r\n                const spotLight: IGLTFSpotLight = (<any>light)[light.type];\r\n                const spLight = new SpotLight(node.light, Vector3.Zero(), Vector3.Zero(), 0, 0, gltfRuntime.scene);\r\n                spLight.name = node.name || \"\";\r\n\r\n                if (spotLight.color) {\r\n                    spLight.diffuse = Color3.FromArray(spotLight.color);\r\n                }\r\n\r\n                if (spotLight.fallOfAngle) {\r\n                    spLight.angle = spotLight.fallOfAngle;\r\n                }\r\n\r\n                if (spotLight.fallOffExponent) {\r\n                    spLight.exponent = spotLight.fallOffExponent;\r\n                }\r\n\r\n                lastNode = spLight;\r\n            }\r\n        }\r\n    }\r\n    // Cameras\r\n    else if (node.camera && !node.babylonNode && !gltfRuntime.importOnlyMeshes) {\r\n        const camera: IGLTFCamera = gltfRuntime.cameras[node.camera];\r\n\r\n        if (camera) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            if (camera.type === \"orthographic\") {\r\n                const orthoCamera = new FreeCamera(node.camera, Vector3.Zero(), gltfRuntime.scene, false);\r\n\r\n                orthoCamera.name = node.name || \"\";\r\n                orthoCamera.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n                orthoCamera.attachControl();\r\n\r\n                lastNode = orthoCamera;\r\n\r\n                orthoCamera._parentContainer = gltfRuntime.assetContainer;\r\n            } else if (camera.type === \"perspective\") {\r\n                const perspectiveCamera: IGLTFCameraPerspective = (<any>camera)[camera.type];\r\n                const persCamera = new FreeCamera(node.camera, Vector3.Zero(), gltfRuntime.scene, false);\r\n\r\n                persCamera.name = node.name || \"\";\r\n                persCamera.attachControl();\r\n\r\n                if (!perspectiveCamera.aspectRatio) {\r\n                    perspectiveCamera.aspectRatio = gltfRuntime.scene.getEngine().getRenderWidth() / gltfRuntime.scene.getEngine().getRenderHeight();\r\n                }\r\n\r\n                if (perspectiveCamera.znear && perspectiveCamera.zfar) {\r\n                    persCamera.maxZ = perspectiveCamera.zfar;\r\n                    persCamera.minZ = perspectiveCamera.znear;\r\n                }\r\n\r\n                lastNode = persCamera;\r\n                persCamera._parentContainer = gltfRuntime.assetContainer;\r\n            }\r\n\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n        }\r\n    }\r\n\r\n    // Empty node\r\n    if (!node.jointName) {\r\n        if (node.babylonNode) {\r\n            return node.babylonNode;\r\n        } else if (lastNode === null) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            const dummy = new Mesh(node.name || \"\", gltfRuntime.scene);\r\n            dummy._parentContainer = gltfRuntime.assetContainer;\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n            node.babylonNode = dummy;\r\n            lastNode = dummy;\r\n        }\r\n    }\r\n\r\n    if (lastNode !== null) {\r\n        if (node.matrix && lastNode instanceof Mesh) {\r\n            configureNodeFromMatrix(lastNode, node);\r\n        } else {\r\n            const translation = node.translation || [0, 0, 0];\r\n            const rotation = node.rotation || [0, 0, 0, 1];\r\n            const scale = node.scale || [1, 1, 1];\r\n            configureNode(lastNode, Vector3.FromArray(translation), Quaternion.FromArray(rotation), Vector3.FromArray(scale));\r\n        }\r\n\r\n        lastNode.updateCache(true);\r\n        node.babylonNode = lastNode;\r\n    }\r\n\r\n    return lastNode;\r\n};\r\n\r\n/**\r\n * Traverses nodes and creates them\r\n * @param gltfRuntime\r\n * @param id\r\n * @param parent\r\n * @param meshIncluded\r\n */\r\nconst traverseNodes = (gltfRuntime: IGLTFRuntime, id: string, parent: Nullable<Node>, meshIncluded: boolean = false) => {\r\n    const node: IGLTFNode = gltfRuntime.nodes[id];\r\n    let newNode: Nullable<Node> = null;\r\n\r\n    if (gltfRuntime.importOnlyMeshes && !meshIncluded && gltfRuntime.importMeshesNames) {\r\n        if (gltfRuntime.importMeshesNames.indexOf(node.name || \"\") !== -1 || gltfRuntime.importMeshesNames.length === 0) {\r\n            meshIncluded = true;\r\n        } else {\r\n            meshIncluded = false;\r\n        }\r\n    } else {\r\n        meshIncluded = true;\r\n    }\r\n\r\n    if (!node.jointName && meshIncluded) {\r\n        newNode = importNode(gltfRuntime, node, id);\r\n\r\n        if (newNode !== null) {\r\n            newNode.id = id;\r\n            newNode.parent = parent;\r\n        }\r\n    }\r\n\r\n    if (node.children) {\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            traverseNodes(gltfRuntime, node.children[i], newNode, meshIncluded);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * do stuff after buffers, shaders are loaded (e.g. hook up materials, load animations, etc.)\r\n * @param gltfRuntime\r\n */\r\nconst postLoad = (gltfRuntime: IGLTFRuntime) => {\r\n    // Nodes\r\n    let currentScene: IGLTFScene = <IGLTFScene>gltfRuntime.currentScene;\r\n\r\n    if (currentScene) {\r\n        for (let i = 0; i < currentScene.nodes.length; i++) {\r\n            traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n        }\r\n    } else {\r\n        for (const thing in gltfRuntime.scenes) {\r\n            currentScene = <IGLTFScene>gltfRuntime.scenes[thing];\r\n\r\n            for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set animations\r\n    loadAnimations(gltfRuntime);\r\n\r\n    for (let i = 0; i < gltfRuntime.scene.skeletons.length; i++) {\r\n        const skeleton = gltfRuntime.scene.skeletons[i];\r\n        gltfRuntime.scene.beginAnimation(skeleton, 0, Number.MAX_VALUE, true, 1.0);\r\n    }\r\n};\r\n\r\n/**\r\n * onBind shaderrs callback to set uniforms and matrices\r\n * @param mesh\r\n * @param gltfRuntime\r\n * @param unTreatedUniforms\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n * @param onSuccess\r\n */\r\nconst onBindShaderMaterial = (\r\n    mesh: AbstractMesh,\r\n    gltfRuntime: IGLTFRuntime,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter },\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    onSuccess: (shaderMaterial: ShaderMaterial) => void\r\n) => {\r\n    const materialValues = material.values || technique.parameters;\r\n\r\n    for (const unif in unTreatedUniforms) {\r\n        const uniform: IGLTFTechniqueParameter = unTreatedUniforms[unif];\r\n        const type = uniform.type;\r\n\r\n        if (type === EParameterType.FLOAT_MAT2 || type === EParameterType.FLOAT_MAT3 || type === EParameterType.FLOAT_MAT4) {\r\n            if (uniform.semantic && !uniform.source && !uniform.node) {\r\n                GLTFUtils.SetMatrix(gltfRuntime.scene, mesh, uniform, unif, <Effect>shaderMaterial.getEffect());\r\n            } else if (uniform.semantic && (uniform.source || uniform.node)) {\r\n                let source = gltfRuntime.scene.getNodeByName(uniform.source || uniform.node || \"\");\r\n                if (source === null) {\r\n                    source = gltfRuntime.scene.getNodeById(uniform.source || uniform.node || \"\");\r\n                }\r\n                if (source === null) {\r\n                    continue;\r\n                }\r\n\r\n                GLTFUtils.SetMatrix(gltfRuntime.scene, source, uniform, unif, <Effect>shaderMaterial.getEffect());\r\n            }\r\n        } else {\r\n            const value = (<any>materialValues)[technique.uniforms[unif]];\r\n            if (!value) {\r\n                continue;\r\n            }\r\n\r\n            if (type === EParameterType.SAMPLER_2D) {\r\n                const texture = gltfRuntime.textures[material.values ? value : uniform.value].babylonTexture;\r\n\r\n                if (texture === null || texture === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                (<Effect>shaderMaterial.getEffect()).setTexture(unif, texture);\r\n            } else {\r\n                GLTFUtils.SetUniform(<Effect>shaderMaterial.getEffect(), unif, value, type);\r\n            }\r\n        }\r\n    }\r\n\r\n    onSuccess(shaderMaterial);\r\n};\r\n\r\n/**\r\n * Prepare uniforms to send the only one time\r\n * Loads the appropriate textures\r\n * @param gltfRuntime\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n */\r\nconst prepareShaderMaterialUniforms = (\r\n    gltfRuntime: IGLTFRuntime,\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }\r\n) => {\r\n    const materialValues = material.values || technique.parameters;\r\n    const techniqueUniforms = technique.uniforms;\r\n\r\n    /**\r\n     * Prepare values here (not matrices)\r\n     */\r\n    for (const unif in unTreatedUniforms) {\r\n        const uniform: IGLTFTechniqueParameter = unTreatedUniforms[unif];\r\n        const type = uniform.type;\r\n        let value = (<any>materialValues)[techniqueUniforms[unif]];\r\n\r\n        if (value === undefined) {\r\n            // In case the value is the same for all materials\r\n            value = <any>uniform.value;\r\n        }\r\n\r\n        if (!value) {\r\n            continue;\r\n        }\r\n\r\n        const onLoadTexture = (uniformName: Nullable<string>) => {\r\n            return (texture: Texture) => {\r\n                if (uniform.value && uniformName) {\r\n                    // Static uniform\r\n                    shaderMaterial.setTexture(uniformName, texture);\r\n                    delete unTreatedUniforms[uniformName];\r\n                }\r\n            };\r\n        };\r\n\r\n        // Texture (sampler2D)\r\n        if (type === EParameterType.SAMPLER_2D) {\r\n            GLTFLoaderExtension.LoadTextureAsync(gltfRuntime, material.values ? value : uniform.value, onLoadTexture(unif), () => onLoadTexture(null));\r\n        }\r\n        // Others\r\n        else {\r\n            if (uniform.value && GLTFUtils.SetUniform(shaderMaterial, unif, material.values ? value : uniform.value, type)) {\r\n                // Static uniform\r\n                delete unTreatedUniforms[unif];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Shader compilation failed\r\n * @param program\r\n * @param shaderMaterial\r\n * @param onError\r\n * @returns callback when shader is compiled\r\n */\r\nconst onShaderCompileError = (program: IGLTFProgram, shaderMaterial: ShaderMaterial, onError: (message: string) => void) => {\r\n    return (effect: Effect, error: string) => {\r\n        shaderMaterial.dispose(true);\r\n        onError(\"Cannot compile program named \" + program.name + \". Error: \" + error + \". Default material will be applied\");\r\n    };\r\n};\r\n\r\n/**\r\n * Shader compilation success\r\n * @param gltfRuntime\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n * @param unTreatedUniforms\r\n * @param onSuccess\r\n * @returns callback when shader is compiled\r\n */\r\nconst onShaderCompileSuccess = (\r\n    gltfRuntime: IGLTFRuntime,\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter },\r\n    onSuccess: (shaderMaterial: ShaderMaterial) => void\r\n) => {\r\n    return (_: Effect) => {\r\n        prepareShaderMaterialUniforms(gltfRuntime, shaderMaterial, technique, material, unTreatedUniforms);\r\n\r\n        shaderMaterial.onBind = (mesh: AbstractMesh) => {\r\n            onBindShaderMaterial(mesh, gltfRuntime, unTreatedUniforms, shaderMaterial, technique, material, onSuccess);\r\n        };\r\n    };\r\n};\r\n\r\n/**\r\n * Returns the appropriate uniform if already handled by babylon\r\n * @param tokenizer\r\n * @param technique\r\n * @param unTreatedUniforms\r\n * @returns the name of the uniform handled by babylon\r\n */\r\nconst parseShaderUniforms = (tokenizer: Tokenizer, technique: IGLTFTechnique, unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }): string => {\r\n    for (const unif in technique.uniforms) {\r\n        const uniform = technique.uniforms[unif];\r\n        const uniformParameter: IGLTFTechniqueParameter = technique.parameters[uniform];\r\n\r\n        if (tokenizer.currentIdentifier === unif) {\r\n            if (uniformParameter.semantic && !uniformParameter.source && !uniformParameter.node) {\r\n                const transformIndex = glTFTransforms.indexOf(uniformParameter.semantic);\r\n\r\n                if (transformIndex !== -1) {\r\n                    delete unTreatedUniforms[unif];\r\n                    return babylonTransforms[transformIndex];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return tokenizer.currentIdentifier;\r\n};\r\n\r\n/**\r\n * All shaders loaded. Create materials one by one\r\n * @param gltfRuntime\r\n */\r\nconst importMaterials = (gltfRuntime: IGLTFRuntime) => {\r\n    // Create materials\r\n    for (const mat in gltfRuntime.materials) {\r\n        GLTFLoaderExtension.LoadMaterialAsync(\r\n            gltfRuntime,\r\n            mat,\r\n            () => {},\r\n            () => {}\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Implementation of the base glTF spec\r\n * @internal\r\n */\r\nexport class GLTFLoaderBase {\r\n    public static CreateRuntime(parsedData: any, scene: Scene, rootUrl: string): IGLTFRuntime {\r\n        const gltfRuntime: IGLTFRuntime = {\r\n            extensions: {},\r\n            accessors: {},\r\n            buffers: {},\r\n            bufferViews: {},\r\n            meshes: {},\r\n            lights: {},\r\n            cameras: {},\r\n            nodes: {},\r\n            images: {},\r\n            textures: {},\r\n            shaders: {},\r\n            programs: {},\r\n            samplers: {},\r\n            techniques: {},\r\n            materials: {},\r\n            animations: {},\r\n            skins: {},\r\n            extensionsUsed: [],\r\n\r\n            scenes: {},\r\n\r\n            buffersCount: 0,\r\n            shaderscount: 0,\r\n\r\n            scene: scene,\r\n            rootUrl: rootUrl,\r\n\r\n            loadedBufferCount: 0,\r\n            loadedBufferViews: {},\r\n\r\n            loadedShaderCount: 0,\r\n\r\n            importOnlyMeshes: false,\r\n\r\n            dummyNodes: [],\r\n\r\n            assetContainer: null,\r\n        };\r\n\r\n        // Parse\r\n        if (parsedData.extensions) {\r\n            parseObject(parsedData.extensions, \"extensions\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.extensionsUsed) {\r\n            parseObject(parsedData.extensionsUsed, \"extensionsUsed\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.buffers) {\r\n            parseBuffers(parsedData.buffers, gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.bufferViews) {\r\n            parseObject(parsedData.bufferViews, \"bufferViews\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.accessors) {\r\n            parseObject(parsedData.accessors, \"accessors\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.meshes) {\r\n            parseObject(parsedData.meshes, \"meshes\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.lights) {\r\n            parseObject(parsedData.lights, \"lights\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.cameras) {\r\n            parseObject(parsedData.cameras, \"cameras\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.nodes) {\r\n            parseObject(parsedData.nodes, \"nodes\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.images) {\r\n            parseObject(parsedData.images, \"images\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.textures) {\r\n            parseObject(parsedData.textures, \"textures\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.shaders) {\r\n            parseShaders(parsedData.shaders, gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.programs) {\r\n            parseObject(parsedData.programs, \"programs\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.samplers) {\r\n            parseObject(parsedData.samplers, \"samplers\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.techniques) {\r\n            parseObject(parsedData.techniques, \"techniques\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.materials) {\r\n            parseObject(parsedData.materials, \"materials\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.animations) {\r\n            parseObject(parsedData.animations, \"animations\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.skins) {\r\n            parseObject(parsedData.skins, \"skins\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.scenes) {\r\n            gltfRuntime.scenes = parsedData.scenes;\r\n        }\r\n\r\n        if (parsedData.scene && parsedData.scenes) {\r\n            gltfRuntime.currentScene = parsedData.scenes[parsedData.scene];\r\n        }\r\n\r\n        return gltfRuntime;\r\n    }\r\n\r\n    public static LoadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): void {\r\n        const buffer: IGLTFBuffer = gltfRuntime.buffers[id];\r\n\r\n        if (Tools.IsBase64(buffer.uri)) {\r\n            setTimeout(() => onSuccess(new Uint8Array(Tools.DecodeBase64(buffer.uri))));\r\n        } else {\r\n            Tools.LoadFile(\r\n                gltfRuntime.rootUrl + buffer.uri,\r\n                (data) => onSuccess(new Uint8Array(data as ArrayBuffer)),\r\n                onProgress,\r\n                undefined,\r\n                true,\r\n                (request) => {\r\n                    if (request) {\r\n                        onError(request.status + \" \" + request.statusText);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    public static LoadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: Nullable<ArrayBufferView>) => void, onError: (message: string) => void): void {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n\r\n        if (!texture || !texture.source) {\r\n            onError(\"\");\r\n            return;\r\n        }\r\n\r\n        if (texture.babylonTexture) {\r\n            onSuccess(null);\r\n            return;\r\n        }\r\n\r\n        const source: IGLTFImage = gltfRuntime.images[texture.source];\r\n\r\n        if (Tools.IsBase64(source.uri)) {\r\n            setTimeout(() => onSuccess(new Uint8Array(Tools.DecodeBase64(source.uri))));\r\n        } else {\r\n            Tools.LoadFile(\r\n                gltfRuntime.rootUrl + source.uri,\r\n                (data) => onSuccess(new Uint8Array(data as ArrayBuffer)),\r\n                undefined,\r\n                undefined,\r\n                true,\r\n                (request) => {\r\n                    if (request) {\r\n                        onError(request.status + \" \" + request.statusText);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    public static CreateTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: Nullable<ArrayBufferView>, onSuccess: (texture: Texture) => void): void {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n\r\n        if (texture.babylonTexture) {\r\n            onSuccess(texture.babylonTexture);\r\n            return;\r\n        }\r\n\r\n        const sampler: IGLTFSampler = gltfRuntime.samplers[texture.sampler];\r\n\r\n        const createMipMaps =\r\n            sampler.minFilter === ETextureFilterType.NEAREST_MIPMAP_NEAREST ||\r\n            sampler.minFilter === ETextureFilterType.NEAREST_MIPMAP_LINEAR ||\r\n            sampler.minFilter === ETextureFilterType.LINEAR_MIPMAP_NEAREST ||\r\n            sampler.minFilter === ETextureFilterType.LINEAR_MIPMAP_LINEAR;\r\n\r\n        const samplingMode = Texture.BILINEAR_SAMPLINGMODE;\r\n\r\n        const blob = buffer == null ? new Blob() : new Blob([buffer]);\r\n        const blobURL = URL.createObjectURL(blob);\r\n        const revokeBlobURL = () => URL.revokeObjectURL(blobURL);\r\n        const newTexture = new Texture(blobURL, gltfRuntime.scene, !createMipMaps, true, samplingMode, revokeBlobURL, revokeBlobURL);\r\n        if (sampler.wrapS !== undefined) {\r\n            newTexture.wrapU = GLTFUtils.GetWrapMode(sampler.wrapS);\r\n        }\r\n        if (sampler.wrapT !== undefined) {\r\n            newTexture.wrapV = GLTFUtils.GetWrapMode(sampler.wrapT);\r\n        }\r\n        newTexture.name = id;\r\n\r\n        texture.babylonTexture = newTexture;\r\n        onSuccess(newTexture);\r\n    }\r\n\r\n    public static LoadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string | ArrayBuffer) => void, onError?: (message: string) => void): void {\r\n        const shader: IGLTFShader = gltfRuntime.shaders[id];\r\n\r\n        if (Tools.IsBase64(shader.uri)) {\r\n            const shaderString = atob(shader.uri.split(\",\")[1]);\r\n            if (onSuccess) {\r\n                onSuccess(shaderString);\r\n            }\r\n        } else {\r\n            Tools.LoadFile(gltfRuntime.rootUrl + shader.uri, onSuccess, undefined, undefined, false, (request) => {\r\n                if (request && onError) {\r\n                    onError(request.status + \" \" + request.statusText);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public static LoadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): void {\r\n        const material: IGLTFMaterial = gltfRuntime.materials[id];\r\n        if (!material.technique) {\r\n            if (onError) {\r\n                onError(\"No technique found.\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const technique: IGLTFTechnique = gltfRuntime.techniques[material.technique];\r\n        if (!technique) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            const defaultMaterial = new StandardMaterial(id, gltfRuntime.scene);\r\n            defaultMaterial._parentContainer = gltfRuntime.assetContainer;\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n            defaultMaterial.diffuseColor = new Color3(0.5, 0.5, 0.5);\r\n            defaultMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n            onSuccess(defaultMaterial);\r\n            return;\r\n        }\r\n\r\n        const program: IGLTFProgram = gltfRuntime.programs[technique.program];\r\n        const states: IGLTFTechniqueStates = technique.states;\r\n\r\n        const vertexShader: string = Effect.ShadersStore[program.vertexShader + \"VertexShader\"];\r\n        const pixelShader: string = Effect.ShadersStore[program.fragmentShader + \"PixelShader\"];\r\n        let newVertexShader = \"\";\r\n        let newPixelShader = \"\";\r\n\r\n        const vertexTokenizer = new Tokenizer(vertexShader);\r\n        const pixelTokenizer = new Tokenizer(pixelShader);\r\n\r\n        const unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter } = {};\r\n        const uniforms: string[] = [];\r\n        const attributes: string[] = [];\r\n        const samplers: string[] = [];\r\n\r\n        // Fill uniform, sampler2D and attributes\r\n        for (const unif in technique.uniforms) {\r\n            const uniform = technique.uniforms[unif];\r\n            const uniformParameter: IGLTFTechniqueParameter = technique.parameters[uniform];\r\n\r\n            unTreatedUniforms[unif] = uniformParameter;\r\n\r\n            if (uniformParameter.semantic && !uniformParameter.node && !uniformParameter.source) {\r\n                const transformIndex = glTFTransforms.indexOf(uniformParameter.semantic);\r\n                if (transformIndex !== -1) {\r\n                    uniforms.push(babylonTransforms[transformIndex]);\r\n                    delete unTreatedUniforms[unif];\r\n                } else {\r\n                    uniforms.push(unif);\r\n                }\r\n            } else if (uniformParameter.type === EParameterType.SAMPLER_2D) {\r\n                samplers.push(unif);\r\n            } else {\r\n                uniforms.push(unif);\r\n            }\r\n        }\r\n\r\n        for (const attr in technique.attributes) {\r\n            const attribute = technique.attributes[attr];\r\n            const attributeParameter: IGLTFTechniqueParameter = technique.parameters[attribute];\r\n\r\n            if (attributeParameter.semantic) {\r\n                const name = getAttribute(attributeParameter);\r\n                if (name) {\r\n                    attributes.push(name);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Configure vertex shader\r\n        while (!vertexTokenizer.isEnd() && vertexTokenizer.getNextToken()) {\r\n            const tokenType = vertexTokenizer.currentToken;\r\n\r\n            if (tokenType !== ETokenType.IDENTIFIER) {\r\n                newVertexShader += vertexTokenizer.currentString;\r\n                continue;\r\n            }\r\n\r\n            let foundAttribute = false;\r\n\r\n            for (const attr in technique.attributes) {\r\n                const attribute = technique.attributes[attr];\r\n                const attributeParameter: IGLTFTechniqueParameter = technique.parameters[attribute];\r\n\r\n                if (vertexTokenizer.currentIdentifier === attr && attributeParameter.semantic) {\r\n                    newVertexShader += getAttribute(attributeParameter);\r\n                    foundAttribute = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundAttribute) {\r\n                continue;\r\n            }\r\n\r\n            newVertexShader += parseShaderUniforms(vertexTokenizer, technique, unTreatedUniforms);\r\n        }\r\n\r\n        // Configure pixel shader\r\n        while (!pixelTokenizer.isEnd() && pixelTokenizer.getNextToken()) {\r\n            const tokenType = pixelTokenizer.currentToken;\r\n\r\n            if (tokenType !== ETokenType.IDENTIFIER) {\r\n                newPixelShader += pixelTokenizer.currentString;\r\n                continue;\r\n            }\r\n\r\n            newPixelShader += parseShaderUniforms(pixelTokenizer, technique, unTreatedUniforms);\r\n        }\r\n\r\n        // Create shader material\r\n        const shaderPath = {\r\n            vertex: program.vertexShader + id,\r\n            fragment: program.fragmentShader + id,\r\n        };\r\n\r\n        const options = {\r\n            attributes: attributes,\r\n            uniforms: uniforms,\r\n            samplers: samplers,\r\n            needAlphaBlending: states && states.enable && states.enable.indexOf(3042) !== -1,\r\n        };\r\n\r\n        Effect.ShadersStore[program.vertexShader + id + \"VertexShader\"] = newVertexShader;\r\n        Effect.ShadersStore[program.fragmentShader + id + \"PixelShader\"] = newPixelShader;\r\n\r\n        const shaderMaterial = new ShaderMaterial(id, gltfRuntime.scene, shaderPath, options);\r\n        shaderMaterial.onError = onShaderCompileError(program, shaderMaterial, onError);\r\n        shaderMaterial.onCompiled = onShaderCompileSuccess(gltfRuntime, shaderMaterial, technique, material, unTreatedUniforms, onSuccess);\r\n        shaderMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n\r\n        if (states && states.functions) {\r\n            const functions = states.functions;\r\n            if (functions.cullFace && functions.cullFace[0] !== ECullingType.BACK) {\r\n                shaderMaterial.backFaceCulling = false;\r\n            }\r\n\r\n            const blendFunc = functions.blendFuncSeparate;\r\n            if (blendFunc) {\r\n                if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_ALPHA &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_COMBINE;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.ONE &&\r\n                    blendFunc[1] === EBlendingFunction.ONE &&\r\n                    blendFunc[2] === EBlendingFunction.ZERO &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_ONEONE;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE &&\r\n                    blendFunc[2] === EBlendingFunction.ZERO &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_ADD;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.ZERO &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_COLOR &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_SUBTRACT;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.DST_COLOR &&\r\n                    blendFunc[1] === EBlendingFunction.ZERO &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_MULTIPLY;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_COLOR &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_MAXIMIZED;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * glTF V1 Loader\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFLoader implements IGLTFLoader {\r\n    public static Extensions: { [name: string]: GLTFLoaderExtension } = {};\r\n\r\n    public static RegisterExtension(extension: GLTFLoaderExtension): void {\r\n        if (GLTFLoader.Extensions[extension.name]) {\r\n            Tools.Error('Tool with the same name \"' + extension.name + '\" already exists');\r\n            return;\r\n        }\r\n\r\n        GLTFLoader.Extensions[extension.name] = extension;\r\n    }\r\n\r\n    public dispose(): void {\r\n        // do nothing\r\n    }\r\n\r\n    private _importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        assetContainer: Nullable<AssetContainer>,\r\n        onSuccess: (meshes: AbstractMesh[], skeletons: Skeleton[]) => void,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        onError?: (message: string) => void\r\n    ): boolean {\r\n        scene.useRightHandedSystem = true;\r\n\r\n        GLTFLoaderExtension.LoadRuntimeAsync(\r\n            scene,\r\n            data,\r\n            rootUrl,\r\n            (gltfRuntime) => {\r\n                gltfRuntime.assetContainer = assetContainer;\r\n                gltfRuntime.importOnlyMeshes = true;\r\n\r\n                if (meshesNames === \"\") {\r\n                    gltfRuntime.importMeshesNames = [];\r\n                } else if (typeof meshesNames === \"string\") {\r\n                    gltfRuntime.importMeshesNames = [meshesNames];\r\n                } else if (meshesNames && !(meshesNames instanceof Array)) {\r\n                    gltfRuntime.importMeshesNames = [meshesNames];\r\n                } else {\r\n                    gltfRuntime.importMeshesNames = [];\r\n                    Tools.Warn(\"Argument meshesNames must be of type string or string[]\");\r\n                }\r\n\r\n                // Create nodes\r\n                this._createNodes(gltfRuntime);\r\n\r\n                const meshes: AbstractMesh[] = [];\r\n                const skeletons: Skeleton[] = [];\r\n\r\n                // Fill arrays of meshes and skeletons\r\n                for (const nde in gltfRuntime.nodes) {\r\n                    const node: IGLTFNode = gltfRuntime.nodes[nde];\r\n\r\n                    if (node.babylonNode instanceof AbstractMesh) {\r\n                        meshes.push(<AbstractMesh>node.babylonNode);\r\n                    }\r\n                }\r\n\r\n                for (const skl in gltfRuntime.skins) {\r\n                    const skin: IGLTFSkins = gltfRuntime.skins[skl];\r\n\r\n                    if (skin.babylonSkeleton instanceof Skeleton) {\r\n                        skeletons.push(skin.babylonSkeleton);\r\n                    }\r\n                }\r\n\r\n                // Load buffers, shaders, materials, etc.\r\n                this._loadBuffersAsync(gltfRuntime, () => {\r\n                    this._loadShadersAsync(gltfRuntime, () => {\r\n                        importMaterials(gltfRuntime);\r\n                        postLoad(gltfRuntime);\r\n\r\n                        if (!GLTFFileLoader.IncrementalLoading && onSuccess) {\r\n                            onSuccess(meshes, skeletons);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                if (GLTFFileLoader.IncrementalLoading && onSuccess) {\r\n                    onSuccess(meshes, skeletons);\r\n                }\r\n            },\r\n            onError\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Imports one or more meshes from a loaded gltf file and adds them to the scene\r\n     * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene the scene the meshes should be added to\r\n     * @param assetContainer defines the asset container to use (can be null)\r\n     * @param data gltf data containing information of the meshes in a loaded file\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress event that fires when loading progress has occured\r\n     * @returns a promise containg the loaded meshes, particles, skeletons and animations\r\n     */\r\n    public importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        assetContainer: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this._importMeshAsync(\r\n                meshesNames,\r\n                scene,\r\n                data,\r\n                rootUrl,\r\n                assetContainer,\r\n                (meshes, skeletons) => {\r\n                    resolve({\r\n                        meshes: meshes,\r\n                        particleSystems: [],\r\n                        skeletons: skeletons,\r\n                        animationGroups: [],\r\n                        lights: [],\r\n                        transformNodes: [],\r\n                        geometries: [],\r\n                        spriteManagers: [],\r\n                    });\r\n                },\r\n                onProgress,\r\n                (message) => {\r\n                    reject(new Error(message));\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    private _loadAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onSuccess: () => void,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        onError?: (message: string) => void\r\n    ): void {\r\n        scene.useRightHandedSystem = true;\r\n\r\n        GLTFLoaderExtension.LoadRuntimeAsync(\r\n            scene,\r\n            data,\r\n            rootUrl,\r\n            (gltfRuntime) => {\r\n                // Load runtime extensios\r\n                GLTFLoaderExtension.LoadRuntimeExtensionsAsync(\r\n                    gltfRuntime,\r\n                    () => {\r\n                        // Create nodes\r\n                        this._createNodes(gltfRuntime);\r\n\r\n                        // Load buffers, shaders, materials, etc.\r\n                        this._loadBuffersAsync(gltfRuntime, () => {\r\n                            this._loadShadersAsync(gltfRuntime, () => {\r\n                                importMaterials(gltfRuntime);\r\n                                postLoad(gltfRuntime);\r\n\r\n                                if (!GLTFFileLoader.IncrementalLoading) {\r\n                                    onSuccess();\r\n                                }\r\n                            });\r\n                        });\r\n\r\n                        if (GLTFFileLoader.IncrementalLoading) {\r\n                            onSuccess();\r\n                        }\r\n                    },\r\n                    onError\r\n                );\r\n            },\r\n            onError\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Imports all objects from a loaded gltf file and adds them to the scene\r\n     * @param scene the scene the objects should be added to\r\n     * @param data gltf data containing information of the meshes in a loaded file\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress event that fires when loading progress has occured\r\n     * @returns a promise which completes when objects have been loaded to the scene\r\n     */\r\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadAsync(\r\n                scene,\r\n                data,\r\n                rootUrl,\r\n                () => {\r\n                    resolve();\r\n                },\r\n                onProgress,\r\n                (message) => {\r\n                    reject(new Error(message));\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    private _loadShadersAsync(gltfRuntime: IGLTFRuntime, onload: () => void): void {\r\n        let hasShaders = false;\r\n\r\n        const processShader = (sha: string, shader: IGLTFShader) => {\r\n            GLTFLoaderExtension.LoadShaderStringAsync(\r\n                gltfRuntime,\r\n                sha,\r\n                (shaderString) => {\r\n                    if (shaderString instanceof ArrayBuffer) {\r\n                        return;\r\n                    }\r\n\r\n                    gltfRuntime.loadedShaderCount++;\r\n\r\n                    if (shaderString) {\r\n                        Effect.ShadersStore[sha + (shader.type === EShaderType.VERTEX ? \"VertexShader\" : \"PixelShader\")] = shaderString;\r\n                    }\r\n\r\n                    if (gltfRuntime.loadedShaderCount === gltfRuntime.shaderscount) {\r\n                        onload();\r\n                    }\r\n                },\r\n                () => {\r\n                    Tools.Error(\"Error when loading shader program named \" + sha + \" located at \" + shader.uri);\r\n                }\r\n            );\r\n        };\r\n\r\n        for (const sha in gltfRuntime.shaders) {\r\n            hasShaders = true;\r\n\r\n            const shader: IGLTFShader = gltfRuntime.shaders[sha];\r\n            if (shader) {\r\n                processShader.bind(this, sha, shader)();\r\n            } else {\r\n                Tools.Error(\"No shader named: \" + sha);\r\n            }\r\n        }\r\n\r\n        if (!hasShaders) {\r\n            onload();\r\n        }\r\n    }\r\n\r\n    private _loadBuffersAsync(gltfRuntime: IGLTFRuntime, onLoad: () => void): void {\r\n        let hasBuffers = false;\r\n\r\n        const processBuffer = (buf: string, buffer: IGLTFBuffer) => {\r\n            GLTFLoaderExtension.LoadBufferAsync(\r\n                gltfRuntime,\r\n                buf,\r\n                (bufferView) => {\r\n                    gltfRuntime.loadedBufferCount++;\r\n\r\n                    if (bufferView) {\r\n                        if (bufferView.byteLength != gltfRuntime.buffers[buf].byteLength) {\r\n                            Tools.Error(\"Buffer named \" + buf + \" is length \" + bufferView.byteLength + \". Expected: \" + buffer.byteLength); // Improve error message\r\n                        }\r\n\r\n                        gltfRuntime.loadedBufferViews[buf] = bufferView;\r\n                    }\r\n\r\n                    if (gltfRuntime.loadedBufferCount === gltfRuntime.buffersCount) {\r\n                        onLoad();\r\n                    }\r\n                },\r\n                () => {\r\n                    Tools.Error(\"Error when loading buffer named \" + buf + \" located at \" + buffer.uri);\r\n                }\r\n            );\r\n        };\r\n\r\n        for (const buf in gltfRuntime.buffers) {\r\n            hasBuffers = true;\r\n\r\n            const buffer: IGLTFBuffer = gltfRuntime.buffers[buf];\r\n            if (buffer) {\r\n                processBuffer.bind(this, buf, buffer)();\r\n            } else {\r\n                Tools.Error(\"No buffer named: \" + buf);\r\n            }\r\n        }\r\n\r\n        if (!hasBuffers) {\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    private _createNodes(gltfRuntime: IGLTFRuntime): void {\r\n        let currentScene = <IGLTFScene>gltfRuntime.currentScene;\r\n\r\n        if (currentScene) {\r\n            // Only one scene even if multiple scenes are defined\r\n            for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n            }\r\n        } else {\r\n            // Load all scenes\r\n            for (const thing in gltfRuntime.scenes) {\r\n                currentScene = <IGLTFScene>gltfRuntime.scenes[thing];\r\n\r\n                for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                    traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport abstract class GLTFLoaderExtension {\r\n    private _name: string;\r\n\r\n    public constructor(name: string) {\r\n        this._name = name;\r\n    }\r\n\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading the runtime\r\n     * Return true to stop further extensions from loading the runtime\r\n     * @param scene\r\n     * @param data\r\n     * @param rootUrl\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading the runtime\r\n     */\r\n    public loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess?: (gltfRuntime: IGLTFRuntime) => void, onError?: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an onverride for creating gltf runtime\r\n     * Return true to stop further extensions from creating the runtime\r\n     * @param gltfRuntime\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from creating the runtime\r\n     */\r\n    public loadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError?: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading buffers\r\n     * Return true to stop further extensions from loading this buffer\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onProgress\r\n     * @returns true to stop further extensions from loading this buffer\r\n     */\r\n    public loadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading texture buffers\r\n     * Return true to stop further extensions from loading this texture data\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this texture data\r\n     */\r\n    public loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for creating textures\r\n     * Return true to stop further extensions from loading this texture\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param buffer\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this texture\r\n     */\r\n    public createTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: ArrayBufferView, onSuccess: (texture: Texture) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading shader strings\r\n     * Return true to stop further extensions from loading this shader data\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this shader data\r\n     */\r\n    public loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading materials\r\n     * Return true to stop further extensions from loading this material\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this material\r\n     */\r\n    public loadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ---------\r\n    // Utilities\r\n    // ---------\r\n\r\n    public static LoadRuntimeAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onSuccess?: (gltfRuntime: IGLTFRuntime) => void,\r\n        onError?: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadRuntimeAsync(scene, data, rootUrl, onSuccess, onError);\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    if (!onSuccess) {\r\n                        return;\r\n                    }\r\n                    onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    public static LoadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError?: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadRuntimeExtensionsAsync(gltfRuntime, onSuccess, onError);\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    onSuccess();\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    public static LoadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (bufferView: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadBufferAsync(gltfRuntime, id, onSuccess, onError, onProgress);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadBufferAsync(gltfRuntime, id, onSuccess, onError, onProgress);\r\n            }\r\n        );\r\n    }\r\n\r\n    public static LoadTextureAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (texture: Texture) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._LoadTextureBufferAsync(\r\n            gltfRuntime,\r\n            id,\r\n            (buffer) => {\r\n                if (buffer) {\r\n                    GLTFLoaderExtension._CreateTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n                }\r\n            },\r\n            onError\r\n        );\r\n    }\r\n\r\n    public static LoadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderData: string | ArrayBuffer) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadShaderStringAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadShaderStringAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    public static LoadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadMaterialAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadMaterialAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    private static _LoadTextureBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: Nullable<ArrayBufferView>) => void,\r\n        onError: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadTextureBufferAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadTextureBufferAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    private static _CreateTextureAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        buffer: ArrayBufferView,\r\n        onSuccess: (texture: Texture) => void,\r\n        onError: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.createTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.CreateTextureAsync(gltfRuntime, id, buffer, onSuccess);\r\n            }\r\n        );\r\n    }\r\n\r\n    private static _ApplyExtensions(func: (loaderExtension: GLTFLoaderExtension) => boolean, defaultFunc: () => void): void {\r\n        for (const extensionName in GLTFLoader.Extensions) {\r\n            const loaderExtension = GLTFLoader.Extensions[extensionName];\r\n            if (func(loaderExtension)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        defaultFunc();\r\n    }\r\n}\r\n\r\nGLTFFileLoader._CreateGLTF1Loader = () => new GLTFLoader();\r\n","import { GLTFLoaderExtension, GLTFLoader, GLTFLoaderBase } from \"./glTFLoader\";\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport type { IGLTFRuntime, IGLTFTexture, IGLTFImage, IGLTFBufferView, IGLTFShader } from \"./glTFLoaderInterfaces\";\r\nimport { EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\n\r\nconst BinaryExtensionBufferName = \"binary_glTF\";\r\n\r\ninterface IGLTFBinaryExtensionShader {\r\n    bufferView: string;\r\n}\r\n\r\ninterface IGLTFBinaryExtensionImage {\r\n    bufferView: string;\r\n    mimeType: string;\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFBinaryExtension extends GLTFLoaderExtension {\r\n    private _bin: IDataBuffer;\r\n\r\n    public constructor() {\r\n        super(\"KHR_binary_glTF\");\r\n    }\r\n\r\n    public override loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess: (gltfRuntime: IGLTFRuntime) => void): boolean {\r\n        const extensionsUsed = (<any>data.json).extensionsUsed;\r\n        if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\r\n            return false;\r\n        }\r\n\r\n        this._bin = data.bin;\r\n        onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n        return true;\r\n    }\r\n\r\n    public override loadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (id !== BinaryExtensionBufferName) {\r\n            return false;\r\n        }\r\n\r\n        this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, (error) => onError(error.message));\r\n        return true;\r\n    }\r\n\r\n    public override loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void): boolean {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n        const source: IGLTFImage = gltfRuntime.images[texture.source];\r\n        if (!source.extensions || !(this.name in source.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const sourceExt: IGLTFBinaryExtensionImage = source.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\r\n        const buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n        onSuccess(buffer);\r\n        return true;\r\n    }\r\n\r\n    public override loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void): boolean {\r\n        const shader: IGLTFShader = gltfRuntime.shaders[id];\r\n        if (!shader.extensions || !(this.name in shader.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const binaryExtensionShader: IGLTFBinaryExtensionShader = shader.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\r\n        const shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n\r\n        setTimeout(() => {\r\n            const shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\r\n            onSuccess(shaderString);\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());\r\n","import { GLTFLoaderExtension, GLTFLoaderBase, GLTFLoader } from \"./glTFLoader\";\r\n\r\nimport type { IGLTFRuntime, IGLTFMaterial } from \"./glTFLoaderInterfaces\";\r\n\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { PointLight } from \"core/Lights/pointLight\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\n\r\ninterface IGLTFMaterialsCommonExtensionValues {\r\n    ambient?: number[] | string;\r\n    diffuse?: number[] | string;\r\n    emission?: number[] | string;\r\n    specular?: number[] | string;\r\n    shininess?: number;\r\n    transparency?: number;\r\n}\r\n\r\ninterface IGLTFMaterialsCommonExtension {\r\n    technique: string;\r\n    transparent?: number;\r\n    doubleSided?: boolean;\r\n    values: IGLTFMaterialsCommonExtensionValues;\r\n}\r\n\r\ninterface IGLTFRuntimeCommonExtension {\r\n    lights: { [key: string]: IGLTFLightCommonExtension };\r\n}\r\n\r\ninterface IGLTFLightCommonExtension {\r\n    name: string;\r\n    type: string;\r\n\r\n    ambient?: IGLTFAmbientLightCommonExtension;\r\n    point?: IGLTFPointLightCommonExtension;\r\n    directional?: IGLTFDirectionalLightCommonExtension;\r\n    spot?: IGLTFSpotLightCommonExtension;\r\n}\r\n\r\ninterface IGLTFPointLightCommonExtension {\r\n    color: number[];\r\n    constantAttenuation: number;\r\n    linearAttenuation: number;\r\n    quadraticAttenuation: number;\r\n}\r\n\r\ninterface IGLTFAmbientLightCommonExtension {\r\n    color: number[];\r\n}\r\n\r\ninterface IGLTFDirectionalLightCommonExtension {\r\n    color: number[];\r\n}\r\n\r\ninterface IGLTFSpotLightCommonExtension {\r\n    color: number[];\r\n    constantAttenuation: number;\r\n    fallOffAngle: number;\r\n    fallOffExponent: number;\r\n    linearAttenuation: number;\r\n    quadraticAttenuation: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFMaterialsCommonExtension extends GLTFLoaderExtension {\r\n    constructor() {\r\n        super(\"KHR_materials_common\");\r\n    }\r\n\r\n    public override loadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime): boolean {\r\n        if (!gltfRuntime.extensions) {\r\n            return false;\r\n        }\r\n\r\n        const extension: IGLTFRuntimeCommonExtension = gltfRuntime.extensions[this.name];\r\n        if (!extension) {\r\n            return false;\r\n        }\r\n\r\n        // Create lights\r\n        const lights = extension.lights;\r\n        if (lights) {\r\n            for (const thing in lights) {\r\n                const light: IGLTFLightCommonExtension = lights[thing];\r\n\r\n                switch (light.type) {\r\n                    case \"ambient\": {\r\n                        const ambientLight = new HemisphericLight(light.name, new Vector3(0, 1, 0), gltfRuntime.scene);\r\n                        const ambient = light.ambient;\r\n                        if (ambient) {\r\n                            ambientLight.diffuse = Color3.FromArray(ambient.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"point\": {\r\n                        const pointLight = new PointLight(light.name, new Vector3(10, 10, 10), gltfRuntime.scene);\r\n                        const point = light.point;\r\n                        if (point) {\r\n                            pointLight.diffuse = Color3.FromArray(point.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"directional\": {\r\n                        const dirLight = new DirectionalLight(light.name, new Vector3(0, -1, 0), gltfRuntime.scene);\r\n                        const directional = light.directional;\r\n                        if (directional) {\r\n                            dirLight.diffuse = Color3.FromArray(directional.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"spot\": {\r\n                        const spot = light.spot;\r\n                        if (spot) {\r\n                            const spotLight = new SpotLight(\r\n                                light.name,\r\n                                new Vector3(0, 10, 0),\r\n                                new Vector3(0, -1, 0),\r\n                                spot.fallOffAngle || Math.PI,\r\n                                spot.fallOffExponent || 0.0,\r\n                                gltfRuntime.scene\r\n                            );\r\n                            spotLight.diffuse = Color3.FromArray(spot.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    default:\r\n                        Tools.Warn('GLTF Material Common extension: light type \"' + light.type + \"” not supported\");\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override loadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): boolean {\r\n        const material: IGLTFMaterial = gltfRuntime.materials[id];\r\n        if (!material || !material.extensions) {\r\n            return false;\r\n        }\r\n\r\n        const extension: IGLTFMaterialsCommonExtension = material.extensions[this.name];\r\n        if (!extension) {\r\n            return false;\r\n        }\r\n\r\n        const standardMaterial = new StandardMaterial(id, gltfRuntime.scene);\r\n        standardMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n\r\n        if (extension.technique === \"CONSTANT\") {\r\n            standardMaterial.disableLighting = true;\r\n        }\r\n\r\n        standardMaterial.backFaceCulling = extension.doubleSided === undefined ? false : !extension.doubleSided;\r\n        standardMaterial.alpha = extension.values.transparency === undefined ? 1.0 : extension.values.transparency;\r\n        standardMaterial.specularPower = extension.values.shininess === undefined ? 0.0 : extension.values.shininess;\r\n\r\n        // Ambient\r\n        if (typeof extension.values.ambient === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.ambient, standardMaterial, \"ambientTexture\", onError);\r\n        } else {\r\n            standardMaterial.ambientColor = Color3.FromArray(extension.values.ambient || [0, 0, 0]);\r\n        }\r\n\r\n        // Diffuse\r\n        if (typeof extension.values.diffuse === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.diffuse, standardMaterial, \"diffuseTexture\", onError);\r\n        } else {\r\n            standardMaterial.diffuseColor = Color3.FromArray(extension.values.diffuse || [0, 0, 0]);\r\n        }\r\n\r\n        // Emission\r\n        if (typeof extension.values.emission === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.emission, standardMaterial, \"emissiveTexture\", onError);\r\n        } else {\r\n            standardMaterial.emissiveColor = Color3.FromArray(extension.values.emission || [0, 0, 0]);\r\n        }\r\n\r\n        // Specular\r\n        if (typeof extension.values.specular === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.specular, standardMaterial, \"specularTexture\", onError);\r\n        } else {\r\n            standardMaterial.specularColor = Color3.FromArray(extension.values.specular || [0, 0, 0]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _loadTexture(gltfRuntime: IGLTFRuntime, id: string, material: StandardMaterial, propertyPath: string, onError: (message: string) => void): void {\r\n        // Create buffer from texture url\r\n        GLTFLoaderBase.LoadTextureBufferAsync(\r\n            gltfRuntime,\r\n            id,\r\n            (buffer) => {\r\n                // Create texture from buffer\r\n                GLTFLoaderBase.CreateTextureAsync(gltfRuntime, id, buffer, (texture) => ((<any>material)[propertyPath] = texture));\r\n            },\r\n            onError\r\n        );\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFMaterialsCommonExtension());\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as GLTF1 from \"loaders/glTF/1.0/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GLTF1 = (<any>globalObject).BABYLON.GLTF1 || {};\r\n    for (const key in GLTF1) {\r\n        (<any>globalObject).BABYLON.GLTF1[key] = (<any>GLTF1)[key];\r\n    }\r\n}\r\n\r\nexport { GLTF1 };\r\n","// eslint-disable-next-line import/export\r\nimport * as loaders from \"@lts/loaders/legacy/legacy-glTF1FileLoader\";\r\nexport { loaders };\r\nexport default loaders;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__597__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","extendStatics","b","setPrototypeOf","__proto__","Array","p","__extends","TypeError","String","__","constructor","create","SuppressedError","validateAsync","data","rootUrl","fileName","getExternalResource","options","externalResourceFunction","uri","ArrayBuffer","isView","GLTFValidator","validateBytes","validateString","workerFunc","pendingExternalResources","onmessage","message","id","importScripts","url","Promise","resolve","reject","index","length","push","postMessage","then","reason","GLTFLoaderCoordinateSystemMode","GLTFLoaderAnimationStartMode","GLTFLoaderState","ValidateAsync","Worker","workerContent","workerBlobUrl","URL","createObjectURL","Blob","type","worker","onError","error","removeEventListener","onMessage","buffer","terminate","addEventListener","Tools","GetBabylonScriptURL","Configuration","slicedData","slice","_LoadScriptPromise","LoadBabylonScriptAsync","_DefaultCdnUrl","GLTFMagicBase64Encoded","GLTFFileLoaderMetadata","isBinary","mimeType","readAsync","arrayBuffer","byteOffset","byteLength","Uint8Array","onParsedObservable","Observable","onMeshLoadedObservable","onSkinLoadedObservable","onTextureLoadedObservable","onMaterialLoadedObservable","onCameraLoadedObservable","onCompleteObservable","onErrorObservable","onDisposeObservable","onExtensionLoadedObservable","validate","onValidatedObservable","_loader","_state","_requests","name","extensions","onLoaderStateChangedObservable","_logIndentLevel","_loggingEnabled","_log","_logDisabled","_capturePerformanceCounters","_startPerformanceCounter","_startPerformanceCounterDisabled","_endPerformanceCounter","_endPerformanceCounterDisabled","copyFrom","callback","_onParsedObserver","remove","add","_onMeshLoadedObserver","_onSkinLoadedObserver","node","skinnedNode","_onTextureLoadedObserver","_onMaterialLoadedObserver","_onCameraLoadedObserver","_onCompleteObserver","_onErrorObserver","_onDisposeObserver","_onExtensionLoadedObserver","_logEnabled","_startPerformanceCounterEnabled","_endPerformanceCounterEnabled","_onValidatedObserver","dispose","abort","_progressCallback","preprocessUrlAsync","clear","notifyObservers","loadFile","scene","fileOrUrl","onSuccess","onProgress","useArrayBuffer","_loadBinary","GetFilename","useRangeRequests","Logger","Warn","dataBuffer","_loadFile","webRequest","setRequestHeader","_unpackBinaryAsync","DataReader","loaderData","_validate","json","_parseJson","arrayBufferView","RangeError","readViewAsync","importMeshAsync","meshesNames","_getLoader","loadAsync","loadAssetContainerAsync","container","AssetContainer","materials","material","textures","texture","cameras","camera","morphTargetManagers","mesh","morphTargetManager","result","apply","geometries","meshes","particleSystems","skeletons","animationGroups","lights","transformNodes","canDirectLoad","indexOf","startsWith","directLoad","DecodeBase64UrlToBinary","createPlugin","GLTFFileLoader","whenCompleteAsync","addOnce","_setState","state","onOpened","request","event","_onProgress","_lengthComputable","_total","_loaded","lengthComputable","loaded","total","GLTFValidation","_loadFileAsync","asset","version","minVersion","generator","_parseVersion","Error","_compareVersion","major","minor","createLoader","_CreateGLTF1Loader","_CreateGLTF2Loader","parsed","JSON","parse","dataReader","magic","readUint32","RuntimeError","ErrorCodes","GLTFLoaderUnexpectedMagicError","loggingEnabled","unpacked","_unpackBinaryV1Async","_unpackBinaryV2Async","contentLength","contentFormat","bodyLength","readString","bin","ChunkFormat","chunkLength","skipBytes","match","parseInt","a","_logOpen","_logClose","spaces","_logSpaces","substring","Log","counterName","StartPerformanceCounter","EndPerformanceCounter","IncrementalLoading","HomogeneousCoordinates","coordinateSystemMode","AUTO","animationStartMode","FIRST","loadNodeAnimations","loadSkins","loadMorphTargets","compileMaterials","useClipPlane","compileShadowGenerators","transparencyAsCoverage","createInstances","alwaysComputeBoundingBox","loadAllMaterials","loadOnlyMaterials","skipMaterials","useSRGBBuffers","targetFps","alwaysComputeSkeletonRootNode","useGltfTextureNames","extensionOptions","onParsed","customRootNode","onMeshLoaded","onSkinLoaded","onTextureLoaded","onMaterialLoaded","onCameraLoaded","RegisterSceneLoaderPlugin","EComponentType","EShaderType","EParameterType","ETextureWrapMode","ETextureFilterType","ETextureFormat","ECullingType","EBlendingFunction","globalObject","BABYLON","ETokenType","SetMatrix","source","parameter","uniformName","shaderMaterial","mat","semantic","getWorldMatrix","getProjectionMatrix","getViewMatrix","Matrix","Transpose","multiply","invert","getTransformMatrix","FLOAT_MAT2","setMatrix2x2","GetAsMatrix2x2","FLOAT_MAT3","setMatrix3x3","GetAsMatrix3x3","FLOAT_MAT4","setMatrix","SetUniform","uniform","FLOAT","setFloat","FLOAT_VEC2","setVector2","Vector2","FromArray","FLOAT_VEC3","setVector3","Vector3","FLOAT_VEC4","setVector4","Vector4","GetWrapMode","mode","CLAMP_TO_EDGE","Texture","CLAMP_ADDRESSMODE","MIRRORED_REPEAT","MIRROR_ADDRESSMODE","REPEAT","WRAP_ADDRESSMODE","GetByteStrideFromType","accessor","GetTextureFilterMode","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","TRILINEAR_SAMPLINGMODE","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_SAMPLINGMODE","BILINEAR_SAMPLINGMODE","GetBufferFromBufferView","gltfRuntime","bufferView","componentType","loadedBufferView","loadedBufferViews","BYTE","Int8Array","UNSIGNED_BYTE","SHORT","Int16Array","UNSIGNED_SHORT","Uint16Array","Float32Array","GetBufferFromAccessor","bufferViews","count","GLTFUtils","DecodeBufferToText","view","i","fromCharCode","GetDefaultMaterial","_DefaultMaterial","Effect","ShadersStore","join","attributes","uniforms","samplers","needAlphaBlending","ShaderMaterial","vertex","fragment","setColor4","Color4","toParse","_pos","currentToken","UNKNOWN","currentIdentifier","currentString","isLetterOrDigitPattern","_toParse","_maxPos","getNextToken","isEnd","END_OF_INPUT","read","test","IDENTIFIER","peek","forward","glTFTransforms","babylonTransforms","glTFAnimationPaths","babylonAnimationPaths","parseObject","parsedObjects","runtimeProperty","object","parsedObject","normalizeUVs","getAttribute","attributeParameter","channel","Number","split","configureBoneTransformation","translation","rotation","scale","Quaternion","position","Compose","matrix","getParentBone","skins","jointName","newSkeleton","bones","nodes","nde","children","child","bone","Bone","getNodeToRoot","nodesToRoot","nodeToRoot","j","getJointNode","nodeIsInJoints","jointNames","importMesh","newMesh","_blockEntityCollection","assetContainer","Mesh","_parentContainer","babylonNode","subMaterials","vertexData","verticesStarts","verticesCounts","indexStarts","indexCounts","meshIndex","meshId","primitives","tempVertexData","VertexData","primitive","accessors","normals","set","positions","uvKind","VertexBuffer","UVKind","uvs","matricesIndices","matricesWeights","colors","indices","Int32Array","merge","getMaterialById","MultiMaterial","StandardMaterial","Geometry","computeWorldMatrix","subMeshes","SubMesh","AddToMesh","configureNode","newNode","scaling","rotationQuaternion","importNode","lastNode","importOnlyMeshes","skin","importMeshesNames","skeleton","getLastSkeletonById","Skeleton","babylonSkeleton","nodesToRootToAdd","k","_parent","getNodesToRoot","jointNode","existingBone","getBoneById","foundBone","parentBone","joint","prepare","importSkeleton","light","orthoCamera","FreeCamera","Zero","Camera","ORTHOGRAPHIC_CAMERA","attachControl","perspectiveCamera","persCamera","aspectRatio","getEngine","getRenderWidth","getRenderHeight","znear","zfar","maxZ","minZ","ambienLight","hemiLight","HemisphericLight","color","diffuse","Color3","directionalLight","dirLight","DirectionalLight","pointLight","ptLight","PointLight","spotLight","spLight","SpotLight","fallOfAngle","angle","fallOffExponent","exponent","dummy","decompose","configureNodeFromMatrix","updateCache","traverseNodes","parent","meshIncluded","postLoad","currentScene","thing","scenes","anim","animations","animation","channels","lastAnimation","sampler","inputData","outputData","parameters","input","output","bufferInput","bufferOutput","targetId","target","targetNode","getNodeById","getNodeByName","isBone","targetPath","path","targetPathIndex","animationType","Animation","ANIMATIONTYPE_MATRIX","ANIMATIONTYPE_QUATERNION","ANIMATIONTYPE_VECTOR3","babylonAnimation","keys","arrayOffset","modifyKey","getKeys","ANIMATIONLOOPMODE_CYCLE","getBaseMatrix","frame","setKeys","stopAnimation","beginAnimation","loadAnimations","MAX_VALUE","parseShaderUniforms","tokenizer","technique","unTreatedUniforms","unif","uniformParameter","transformIndex","importMaterials","GLTFLoaderExtension","LoadMaterialAsync","CreateRuntime","parsedData","buffers","images","shaders","programs","techniques","extensionsUsed","buffersCount","shaderscount","loadedBufferCount","loadedShaderCount","dummyNodes","parsedBuffers","buf","parsedBuffer","parseBuffers","parsedShaders","sha","parsedShader","parseShaders","LoadBufferAsync","IsBase64","setTimeout","DecodeBase64","LoadFile","status","statusText","LoadTextureBufferAsync","babylonTexture","CreateTextureAsync","createMipMaps","minFilter","NEAREST_MIPMAP_LINEAR","samplingMode","blob","blobURL","revokeBlobURL","revokeObjectURL","newTexture","wrapS","wrapU","wrapT","wrapV","LoadShaderStringAsync","shader","shaderString","atob","defaultMaterial","diffuseColor","sideOrientation","Material","CounterClockWiseSideOrientation","program","states","vertexShader","pixelShader","fragmentShader","newVertexShader","newPixelShader","vertexTokenizer","Tokenizer","pixelTokenizer","SAMPLER_2D","attr","attribute","foundAttribute","shaderPath","enable","effect","onShaderCompileError","onCompiled","_","materialValues","values","techniqueUniforms","onLoadTexture","setTexture","LoadTextureAsync","prepareShaderMaterialUniforms","onBind","getEffect","onBindShaderMaterial","onShaderCompileSuccess","functions","cullFace","BACK","backFaceCulling","blendFunc","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","alphaMode","Constants","ALPHA_COMBINE","ZERO","ALPHA_ONEONE","ALPHA_ADD","ONE_MINUS_SRC_COLOR","ALPHA_SUBTRACT","DST_COLOR","ALPHA_MULTIPLY","ALPHA_MAXIMIZED","RegisterExtension","extension","GLTFLoader","Extensions","_importMeshAsync","useRightHandedSystem","LoadRuntimeAsync","_createNodes","AbstractMesh","skl","_loadBuffersAsync","_loadShadersAsync","spriteManagers","_loadAsync","LoadRuntimeExtensionsAsync","onload","hasShaders","processShader","VERTEX","bind","onLoad","hasBuffers","processBuffer","_name","loadRuntimeAsync","loadRuntimeExtensionsAsync","loadBufferAsync","loadTextureBufferAsync","createTextureAsync","loadShaderStringAsync","loadMaterialAsync","_ApplyExtensions","loaderExtension","GLTFLoaderBase","_LoadTextureBufferAsync","_CreateTextureAsync","func","defaultFunc","extensionName","_bin","sourceExt","binaryExtensionShader","shaderBytes","GLTFBinaryExtension","ambientLight","ambient","point","directional","spot","fallOffAngle","Math","PI","standardMaterial","disableLighting","doubleSided","alpha","transparency","specularPower","shininess","_loadTexture","ambientColor","emission","emissiveColor","specular","specularColor","propertyPath","GLTFMaterialsCommonExtension","GLTF1"],"sourceRoot":""}